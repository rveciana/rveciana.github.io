{"title":"Raster file formats for JavaScript mapping","contents":"<p>Some time ago, I made some docs about <a href=\"http://geoexamples.com/d3-raster-tools-docs/\">drawing raster data with d3js</a>.</p>\n<p>All the examples GeoTIFF files to get the data, but there are many other possibilities. I&#39;ve made the exercice to create some examples using the same dataset but different strategies for creating the data with different formats.</p>\n<h2 id=\"table-of-contents\">Table of contents</h2>\n<ul>\n<li><a href=\"#the-data\">The data</a></li>\n<li><a href=\"#geotiff\">GeoTIFF</a><ul>\n<li><a href=\"#compression\">Compression</a></li>\n<li><a href=\"#html-example\">HTML example</a></li>\n</ul>\n</li>\n<li><a href=\"#netcdf\">NetCDF</a><ul>\n<li><a href=\"#html-example-1\">HTML example</a></li>\n</ul>\n</li>\n<li><a href=\"#json\">JSON</a><ul>\n<li><a href=\"#html-example-2\">HTML example</a></li>\n</ul>\n</li>\n<li><a href=\"#json-with-encoded-data\">JSON with encoded data</a><ul>\n<li><a href=\"#html-example-3\">HTML example</a></li>\n</ul>\n</li>\n<li><a href=\"#binary-data\">Binary data</a><ul>\n<li><a href=\"#html-example-4\">HTML example</a></li>\n</ul>\n</li>\n<li><a href=\"#lzw-compressed-binary-data\">LZW compressed binary data</a><ul>\n<li><a href=\"#file-creation-using-python\">File creation using Python</a></li>\n<li><a href=\"#html-example-5\">HTML example</a></li>\n</ul>\n</li>\n<li><a href=\"#performance-comparison\">Performance comparison</a></li>\n<li><a href=\"#what-to-do-with-all-this-binary-data\">What to do with all this binary data?</a></li>\n<li><a href=\"#links\">Links</a></li>\n</ul>\n<h2 id=\"the-data\">The data</h2>\n<p>All the examples use the data from <a href=\"http://bl.ocks.org/rveciana/420a33fd0963e2a6aad16da54725af36\">this block</a>. You can see <a href=\"http://geoexamples.com/d3-raster-tools-docs/code_samples/vardah.html\">how I got the data here</a>. I have taken only the first layer (msl pressure) to make the examples simpler:</p>\ngdal_translate -b 1 vardah.tiff vardah_new.tiff<p>You can <a href=\"http://bl.ocks.org/rveciana/raw/420a33fd0963e2a6aad16da54725af36/vardah.tiff\">download here</a> the original <a href=\"http://bl.ocks.org/rveciana/raw/420a33fd0963e2a6aad16da54725af36/vardah.tiff\">vardah.tiff</a> file.</p>\n<h2 id=\"geotiff\">GeoTIFF</h2>\n<p>As in the original example, GeoTIFF can be used as a way to get the raster data. It&#39;s got many advantages, such as being the most widespread format, able to be compressed, that it&#39;s possible to open it directly with any GIS program such as QGIS.</p>\n<p>To use it, use the <a href=\"https://github.com/constantinius/geotiff.js\">geotiff.js library</a>.</p>\n<h3 id=\"compression\">Compression</h3>\n<p>The compressed images are read directly by the latest versions of the library. The compression can reduce the size a lot, specially with the <em>Deflate</em> option. The parsing time is bigger when the image is compressed, but the time is acceptable.</p>\n<p>To create a compressed GeoTIFF file, use the gdal creation options:</p>\ngdal_translate -of GTiff -co COMPRESS=DEFLATE vardah.tiff vardah2.tiff\ngdal_translate -of GTiff -co COMPRESS=LZW vardah.tiff vardah2.tiff\ngdal_translate -of GTiff -co COMPRESS=PACKBITS vardah.tiff vardah2.tiff<p>Other compression options are not available with the geotiffjs library.</p>\n<p>Another thing to take in account is the metadata. The geotransform data is stored in a quite strange way (see tiepoint and pixelscale in the <a href=\"http://geoexamples.com/d3-raster-tools-docs/\">example</a>, and the GDAL metadata, in a special &quot;GDAL&quot; tag, which is not easy to find, although it is not when using python+GDAL.</p>\n<h3 id=\"html-example\">HTML example</h3>\n<p><pre><code>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>meta<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">'geotiff.min.js'</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>meta<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">var</span> urlpath <span class=\"token operator\">=</span>  <span class=\"token string\">\"vardah.tiff\"</span>\n\n<span class=\"token keyword\">var</span> oReq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> urlpath<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"arraybuffer\"</span><span class=\"token punctuation\">;</span>\n\noReq<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> t0 <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> tiff <span class=\"token operator\">=</span> GeoTIFF<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> image <span class=\"token operator\">=</span> tiff<span class=\"token punctuation\">.</span><span class=\"token function\">getImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span><span class=\"token function\">readRasters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> tiepoint <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span><span class=\"token function\">getTiePoints</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> pixelScale <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span><span class=\"token function\">getFileDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ModelPixelScale<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> t1 <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Decoding took \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>t1 <span class=\"token operator\">-</span> t0<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" milliseconds.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//start process</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n\n\n</code></pre></p>\n<ul>\n<li>Note that the request must be set with an <em>arraybuffer</em> <em>responsetype</em></li>\n</ul>\n<h2 id=\"netcdf\">NetCDF</h2>\n<p>NetCDF is a popular format among meteorology data. The format is quite simple and very flexible. As in the case of GeoTIFF, GDAL can write NetCDF files with a special form and there is a <a href=\"https://github.com/cheminfo-js/netcdfjs\">JavaScript library, netcdfjs</a> that reads the format and it&#39;s fast and not very big. It can be opened with QGIS if created with GDAL.</p>\n<p>To create a NetCDF file from a GeoTIFF, just run:</p>\ngdal_translate -of netCDF -b 1 vardah.tiff vardah.nc<p>The name of the output band will be <em>Band1</em>, which is not very nice, since the actual name is stored in another field, not the one used to retrieve the data.</p>\n<h3 id=\"html-example-1\">HTML example</h3>\n<p><pre><code>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>meta<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">'netcdfjs.js'</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>meta<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">var</span> urlpath <span class=\"token operator\">=</span>  <span class=\"token string\">\"vardah.nc\"</span>\n<span class=\"token keyword\">var</span> reader<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> oReq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> urlpath<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"blob\"</span><span class=\"token punctuation\">;</span>\n\noReq<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> t0 <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n  <span class=\"token keyword\">var</span> blob <span class=\"token operator\">=</span> oReq<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">;</span>\n  reader_url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  reader_url<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> t0 <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">netcdfjs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> dataValues <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">getDataVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Band1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> t1 <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Decoding took \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>t1 <span class=\"token operator\">-</span> t0<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" milliseconds.\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">var</span> arrayBuffer <span class=\"token operator\">=</span> reader_url<span class=\"token punctuation\">.</span><span class=\"token function\">readAsArrayBuffer</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//start process</span>\n\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n\n\n</code></pre></p>\n<ul>\n<li>The variables <em>lat</em> and <em>lon</em> return the geographical coordinates for every pixel, which is a good feature</li>\n<li>Some metadata is stored in different variables and fields. Take a look to the library api to see them, but:<ul>\n<li>Printing <em>reader.variables</em> will output a set ob objects with the projection information, longitudes and latitudes</li>\n<li><em>reader.dimensions</em> stores the matrix size</li>\n<li><em>globalAttributes</em> stores other metadata, such as the creation date, GDAL information, etc</li>\n</ul>\n</li>\n<li>Note that the request must be set with a <em>blob</em> <em>responsetype</em></li>\n</ul>\n<h2 id=\"json\">JSON</h2>\n<p>This format is the first that comes in mind when thinking about sharing data. It&#39;s the easiest to understand, and reading it is the most simple thing to code. But it&#39;s a bad idea using it with medium sized matrices, since the size can be for times or more than the original uncompressed GeoTIFF.</p>\n<h3 id=\"html-example-2\">HTML example</h3>\n<p><pre><code>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">var</span> oReq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> t0 <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> jsonData <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> t1 <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Decoding took \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>t1 <span class=\"token operator\">-</span> t0<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" milliseconds.\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"vardah.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n\n\n</code></pre></p>\n<ul>\n<li>Just parse the JSON file!</li>\n<li>Of course, all the metadata is easy to add, so the format is very flexible</li>\n</ul>\n<p>Creating the JSON sample file using python is easy:</p>\n<p><pre><code>\n<span class=\"token keyword\">import</span> gdal\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">from</span> base64 <span class=\"token keyword\">import</span> b64encode\n<span class=\"token keyword\">import</span> struct\n\nd_s <span class=\"token operator\">=</span> gdal<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vardah.tiff\"</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> d_s<span class=\"token punctuation\">.</span><span class=\"token function\">GetRasterBand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ReadAsArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>\nout_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size:\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>shape<span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"http://geoexamples.com/d3-raster-tools-docs/\"</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\nout_data<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">float</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\njson_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\njson_data<span class=\"token punctuation\">[</span><span class=\"token string\">'nx'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>shape<span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"http://geoexamples.com/d3-raster-tools-docs/\"</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\njson_data<span class=\"token punctuation\">[</span><span class=\"token string\">'ny'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\njson_data<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> out_data\n\nfp <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vardah.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span>\nfp<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span><span class=\"token function\">dumps</span><span class=\"token punctuation\">(</span>json_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfp<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n</code></pre></p>\n<ul>\n<li>To make consistent data, put all the numbers in a list, but a matrix could be created the same way, and could be more convenient in certain cases</li>\n</ul>\n<h2 id=\"json-with-encoded-data\">JSON with encoded data</h2>\n<p>Plain JSON data is expensive in terms of space. What if we encode the data in <a href=\"https://en.wikipedia.org/wiki/Base64\">Base64</a>? The data will be much smaller and the JSON format can store all the metadata we want with the same flexibility.</p>\n<p>Let&#39;s look first at how can we create the sample file:</p>\n<p><pre><code>\n<span class=\"token keyword\">import</span> gdal\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">from</span> base64 <span class=\"token keyword\">import</span> b64encode\n<span class=\"token keyword\">import</span> struct\n\nd_s <span class=\"token operator\">=</span> gdal<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vardah.tiff\"</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> d_s<span class=\"token punctuation\">.</span><span class=\"token function\">GetRasterBand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ReadAsArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>\nout_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size:\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>shape<span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"http://geoexamples.com/d3-raster-tools-docs/\"</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\nout_data<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">float</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\njson_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\njson_data<span class=\"token punctuation\">[</span><span class=\"token string\">'nx'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>shape<span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"http://geoexamples.com/d3-raster-tools-docs/\"</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\njson_data<span class=\"token punctuation\">[</span><span class=\"token string\">'ny'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\nb64 <span class=\"token operator\">=</span> <span class=\"token function\">b64encode</span><span class=\"token punctuation\">(</span>struct<span class=\"token punctuation\">.</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>out_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>out_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span>\n\njson_data<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b64\nfp <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vardahb64.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span>\nfp<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span><span class=\"token function\">dumps</span><span class=\"token punctuation\">(</span>json_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfp<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></p>\n<ul>\n<li>Just encode the list after packing it as a binary string<ul>\n<li>I have packed the elements using a <em>f</em>, so as float32 values. If this is changed, remember to change the decoding part! Some variables such as classifications can be stored as bytes, which is much more efficient</li>\n<li>The <em>b64encode</em> function returns in bytes, so it has to be encoded to utf-8 to serialize it into a JSON</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"html-example-3\">HTML example</h3>\n<p><pre><code>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">var</span> oReq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> t0 <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> jsonData <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token function\">atob</span><span class=\"token punctuation\">(</span>jsonData<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>\n            data<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> float32Data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> t1 <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Decoding took \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>t1 <span class=\"token operator\">-</span> t0<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" milliseconds.\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"vardahb64.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n\n\n</code></pre></p>\n<p>Reading this data is quite efficient, but not as easy as plain JSON. The steps are:</p>\n<ul>\n<li>Parse the JSON data with the <em>JSON.parse</em> function</li>\n<li>Convert the encoded field to a binary string using the <em>atob</em> function. This decodes the <em>base64 string</em></li>\n<li>Retrieve all the bytes<ul>\n<li>By splitting all the chars in the string, map all the characters to the UTF-16 codes using <em>String.charCodeAt</em></li>\n<li>Put all the values to a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">JavaScript typed array</a>, so we can convert them later</li>\n</ul>\n</li>\n<li>Since the values were stored as float32, we create a <em>buffer</em> from the unigned int8 array and convert the types. That&#39;s all</li>\n</ul>\n<h2 id=\"binary-data\">Binary data</h2>\n<p>Using binary data directly can be a bit more difficult, but the size is compact, the format is very flexible and the performance is very good. Also, it doesn&#39;t require any external library, which is very convenient in many cases. And since you control all the format, the original data can be obfuscated easily.</p>\n<p>If we want to store metadata, different data types may be involved, making the scripts more complicated, but it&#39;s efficient and not so difficult to do.</p>\n<p>Creating the file is easy:</p>\n<p><pre><code>\n<span class=\"token keyword\">import</span> gdal\n<span class=\"token keyword\">import</span> struct\n\nd_s <span class=\"token operator\">=</span> gdal<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vardah.tiff\"</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> d_s<span class=\"token punctuation\">.</span><span class=\"token function\">GetRasterBand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ReadAsArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>\nout_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>shape<span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"http://geoexamples.com/d3-raster-tools-docs/\"</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\nout_data<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">float</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nfp <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vardah.bin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span>\nfp<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>struct<span class=\"token punctuation\">.</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>out_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>out_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfp<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></p>\n<ul>\n<li>Just use the <em>pack</em> function to store the data<ul>\n<li>Note that the data is packed with the <em>f</em> letter, this is as float32 elements</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"html-example-4\">HTML example</h3>\n<p>Reading the binary data is really easy using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">Javascript typed arrays</a>:\n<pre><code>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n<span class=\"token keyword\">var</span> oReq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">var</span> t0 <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span> <span class=\"token keyword\">var</span> floatArray<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> t1 <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Decoding took \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>t1 <span class=\"token operator\">-</span> t0<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" milliseconds.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"vardah.bin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">'arraybuffer'</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n</code></pre></p>\n<ul>\n<li>Note that the request must be set with an <em>arraybuffer</em> <em>responsetype</em></li>\n<li>Just read the responsa into a new Float32Array. All the values will be there</li>\n</ul>\n<h2 id=\"lzw-compressed-binary-data\">LZW compressed binary data</h2>\n<p>Of course, as in the <a href=\"#geotiff\">GeoTIFF</a> case, all the data can be compressed. Using complex compression algorithms makes you lose the advantage of coding everything without an external library, but the <a href=\"https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\">LZW algorithm</a> is so simple that it can be added with a few lines of code.</p>\n<p>I will use the code sample from the <a href=\"https://rosettacode.org/wiki/LZW_compression\">rossetacode.org site</a>.</p>\n<h3 id=\"file-creation-using-python\">File creation using Python</h3>\n<p><pre><code>\n<span class=\"token keyword\">import</span> gdal\n<span class=\"token keyword\">import</span> struct\n<span class=\"token keyword\">from</span> base64 <span class=\"token keyword\">import</span> b64encode\n\n<span class=\"token string\">''</span>'\nCompression algorithm\n<span class=\"token string\">''</span>'\ndef <span class=\"token function\">compress</span><span class=\"token punctuation\">(</span>uncompressed<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n<span class=\"token string\">\"\"</span><span class=\"token string\">\"Compress a string to a list of output symbols.\"</span><span class=\"token string\">\"\"</span>\n# Build the dictionary<span class=\"token punctuation\">.</span>\ndict_size <span class=\"token operator\">=</span> <span class=\"token number\">256</span>\ndictionary <span class=\"token operator\">=</span> <span class=\"token function\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token function\">xrange</span><span class=\"token punctuation\">(</span>dict_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nw <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\nresult <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> uncompressed<span class=\"token operator\">:</span>\n    wc <span class=\"token operator\">=</span> w <span class=\"token operator\">+</span> c\n    <span class=\"token keyword\">if</span> wc <span class=\"token keyword\">in</span> dictionary<span class=\"token operator\">:</span>\n        w <span class=\"token operator\">=</span> wc\n    <span class=\"token keyword\">else</span><span class=\"token operator\">:</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>dictionary<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        # Add wc to the dictionary<span class=\"token punctuation\">.</span>\n        dictionary<span class=\"token punctuation\">[</span>wc<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dict_size\n        dict_size <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        w <span class=\"token operator\">=</span> c\n\n# Output the code <span class=\"token keyword\">for</span> w<span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">if</span> w<span class=\"token operator\">:</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>dictionary<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span> result\nd_s <span class=\"token operator\">=</span> gdal<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vardah.tiff\"</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> d_s<span class=\"token punctuation\">.</span><span class=\"token function\">GetRasterBand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ReadAsArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nout_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>shape<span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"http://geoexamples.com/d3-raster-tools-docs/\"</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\nout_data<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">float</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nout_data_bytes <span class=\"token operator\">=</span> struct<span class=\"token punctuation\">.</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>out_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>out_data<span class=\"token punctuation\">)</span>\ncompressed <span class=\"token operator\">=</span> <span class=\"token function\">compress</span><span class=\"token punctuation\">(</span>out_data_bytes<span class=\"token punctuation\">)</span>\n\nfp <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vardah.lzw.bin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span>\nfp<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>struct<span class=\"token punctuation\">.</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>compressed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'H'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>compressed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfp<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></p>\n<ul>\n<li>The compression function is copied directly from the <a href=\"https://rosettacode.org/wiki/LZW_compression\">rossetacode.org site</a><ul>\n<li>It&#39;s supposed to work with a string, so we will convert out floats list into a binary bytes string</li>\n</ul>\n</li>\n<li><em>pack</em> will convert the data list into a string with the binary data. The compressed data will be byte by byte</li>\n<li>The data is compressed with the function</li>\n<li>The data is written as a string of unsigned shorts. This is because the compressed data is a list with values from 0 to 65535, so the <em>unsigned short</em> will be the most efficient way to store its values</li>\n</ul>\n<p>The size is reduced by 50% in our example. If a classification is used instead of float values, the compression will be much more efficient.</p>\n<p>If using python3, the <em>compress</em> function would be:\n<pre><code>\ndef <span class=\"token function\">compress</span><span class=\"token punctuation\">(</span>uncompressed<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n<span class=\"token string\">\"\"</span><span class=\"token string\">\"Compress a string to a list of output symbols.\"</span><span class=\"token string\">\"\"</span>\n# Build the dictionary<span class=\"token punctuation\">.</span>\ndict_size <span class=\"token operator\">=</span> <span class=\"token number\">256</span>\ndictionary <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token function\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>dict_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\nw <span class=\"token operator\">=</span> b<span class=\"token string\">\"\"</span>\nresult <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> uncompressed<span class=\"token operator\">:</span>\n    <span class=\"token function\">#print</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token function\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> <span class=\"token function\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    wc <span class=\"token operator\">=</span> w <span class=\"token operator\">+</span> <span class=\"token function\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> wc <span class=\"token keyword\">in</span> dictionary<span class=\"token operator\">:</span>\n        w <span class=\"token operator\">=</span> wc\n    <span class=\"token keyword\">else</span><span class=\"token operator\">:</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>dictionary<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        # Add wc to the dictionary<span class=\"token punctuation\">.</span>\n        dictionary<span class=\"token punctuation\">[</span>wc<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dict_size\n        dict_size <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        w <span class=\"token operator\">=</span> <span class=\"token function\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n# Output the code <span class=\"token keyword\">for</span> w<span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">if</span> w<span class=\"token operator\">:</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>dictionary<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span> result\n</code></pre></p>\n<ul>\n<li><em>str</em> vars in python 2 become <em>bytes</em> in python3, so everything has to be adapted</li>\n<li><em>xrange</em> has to be changed to <em>range</em></li>\n</ul>\n<h3 id=\"html-example-5\">HTML example</h3>\n<p><pre><code>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n<span class=\"token keyword\">var</span> oReq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">var</span> t0 <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span> <span class=\"token keyword\">var</span> compressedArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint16Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>compressedArray<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> uncompressed <span class=\"token operator\">=</span> <span class=\"token function\">uncompress</span><span class=\"token punctuation\">(</span>compressedArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> t1 <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Decoding took \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>t1 <span class=\"token operator\">-</span> t0<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" milliseconds.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"vardah.lzw.bin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">'arraybuffer'</span><span class=\"token punctuation\">;</span>\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//&lt;a href=\"https://rosettacode.org/wiki/LZW_compression#JavaScript\">https://rosettacode.org/wiki/LZW_compression#JavaScript&lt;/a></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">uncompress</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compressed</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span>\ndictionary <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\nw<span class=\"token punctuation\">,</span>\nresult<span class=\"token punctuation\">,</span>\nfloatResult <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\nk<span class=\"token punctuation\">,</span>\nentry <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\ndictSize <span class=\"token operator\">=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\ndictionary<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n    w <span class=\"token operator\">=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span>compressed<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> compressed<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        k <span class=\"token operator\">=</span> compressed<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dictionary<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            entry <span class=\"token operator\">=</span> dictionary<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">===</span> dictSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                entry <span class=\"token operator\">=</span> w <span class=\"token operator\">+</span> w<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n         result <span class=\"token operator\">+=</span> entry<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Add w+entry[0] to the dictionary.</span>\n        dictionary<span class=\"token punctuation\">[</span>dictSize<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> w <span class=\"token operator\">+</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        w <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//Convert from chars to float32 array</span>\n    <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n</code></pre></p>\n<ul>\n<li>As in the other cases, just cll the <em>uncompress</em> function and the float array data will be in the variable</li>\n<li>The <em>uncompress</em> function it the same of the one at the <a href=\"https://rosettacode.org/wiki/LZW_compression\">rossetacode.org site</a>, but modified to convert the bytes string to a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">Float32Array</a><ul>\n<li>By splitting all the chars in the string, map all the characters to the <em>UTF-16 codes</em> using <em>String.charCodeAt</em></li>\n<li>Put all the values to a <em>Uint8Array</em> JavaScript typed array, so we can convert them later</li>\n<li>The unsigned short array is then converted to a <em>Float32Array</em> using buffers</li>\n</ul>\n</li>\n</ul>\n<p>Not so difficult! If some metadata has to be added, things can be a bit more complicated, specially if different types are involved</p>\n<h2 id=\"performance-comparison\">Performance comparison</h2>\n<p>I run all the options so it&#39;s easy to compare the final file size and the time it takes to parse</p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th align=\"center\">Size</th>\n<th align=\"right\">Parsing time</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Uncompressed GeoTIFF</td>\n<td align=\"center\">102 kB</td>\n<td align=\"right\">20 ms</td>\n</tr>\n<tr>\n<td>Packbits GeoTIFF</td>\n<td align=\"center\">103 kB</td>\n<td align=\"right\">80 ms</td>\n</tr>\n<tr>\n<td>LZW GeoTIFF</td>\n<td align=\"center\">53 kB</td>\n<td align=\"right\">54 ms</td>\n</tr>\n<tr>\n<td>Deflate GeoTIFF</td>\n<td align=\"center\">40 kB</td>\n<td align=\"right\">59 ms</td>\n</tr>\n<tr>\n<td>JSON</td>\n<td align=\"center\">490 kB</td>\n<td align=\"right\">9 ms</td>\n</tr>\n<tr>\n<td>Base64 JSON</td>\n<td align=\"center\">135 kB</td>\n<td align=\"right\">12 ms</td>\n</tr>\n<tr>\n<td>Binary</td>\n<td align=\"center\">101 kB</td>\n<td align=\"right\">0.15 ms</td>\n</tr>\n<tr>\n<td>LZW binary</td>\n<td align=\"center\">54 kB</td>\n<td align=\"right\">14 ms</td>\n</tr>\n</tbody></table>\n<ul>\n<li>GeoTIFF files, specially if compressed, are the smallest ones, but with the higher parsing time. Anyway, 60ms is a very good time, so it will be the usual method</li>\n<li>JSON files are the most inefficient in terms of space, and the parsing time is not as low as it could be, because there are many characters to parse</li>\n<li>Binary files are really fast to parse, and the size is quite small if compressed</li>\n</ul>\n<h2 id=\"what-to-do-with-all-this-binary-data\">What to do with all this binary data?</h2>\n<p>With the html canvas element and some libraries around there, many visualizations can be done with a point matrix. I made a tutorial some time ago: <a href=\"http://geoexamples.com/d3-raster-tools-docs/\">d3-raster-tools-docs</a></p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"http://geoexamples.com/d3-raster-tools-docs/\">drawing raster data with d3js</a></li>\n<li><a href=\"http://bl.ocks.org/rveciana/420a33fd0963e2a6aad16da54725af36\">Vardah and leaflet block</a></li>\n<li><a href=\"http://geoexamples.com/d3-raster-tools-docs/code_samples/vardah.html\">Generating the Vardah data file</a></li>\n<li><a href=\"http://bl.ocks.org/rveciana/raw/420a33fd0963e2a6aad16da54725af36/vardah.tiff\">The original geotiff file</a></li>\n<li><a href=\"https://github.com/constantinius/geotiff.js\">The geotiff.js library</a></li>\n<li><a href=\"https://github.com/cheminfo-js/netcdfjs\">The netcdfjs library</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Base64\">Base64 Wikipedia page</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">JavaScript typed arrays</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\">LZW algorithm wikipedia page</a></li>\n<li><a href=\"https://rosettacode.org/wiki/LZW_compression\">LZW implementation in many languages, including Python and JavaScript</a></li>\n<li><a href=\"http://geoexamples.com/d3-raster-tools-docs/\">D3js raster tools documentation</a></li>\n</ul>\n","tags":["raster"],"date":"2017-11-04T00:00:00.000Z","thumbnail":"/images/d3/raster-file-formats-javascript/twitter.png"}