{"title":"Code coverage and pylint with PyCharm community","contents":"<p>I&#39;ve using Eclipse and <a href=\"http://www.pydev.org/\">PyDev</a> for some years now, but I always wanted to switch to <a href=\"https://www.jetbrains.com/pycharm/\">PyCharm</a>. The main problem I found was the integration with coverage.py and pylint, which are very easy in Pydev, but not available with the Community version of PyCharm.</p>\n<p>This is the solution for both tools using PyCharm 5 in a python3 project:</p>\n<h1 id=\"pylint\">pylint</h1>\n<p>Let&#39;s do the easier one first. PyCharm comes with the <em>pep8.py</em> and other syntax checks, but I like <a href=\"https://www.pylint.org/\">pylint</a> because it gives some indications about number of class methods, variables in a function, etc.</p>\n<p>Install pylint if you don&#39;t have it in your system:\n\nsudo pip install pylint\n\nThen, open <em>File-&gt;Settings-&gt;Tools-&gt;External tools</em> and click the <em>+</em> button. You will get a window that has to be filled like this:</p>\n<img src=\"/images/python/pycharm-coverage/pylint.png\"/>\n\n<ul>\n<li>Remember to check the <em>Show console when a message is printed to standard output stream</em> and the same with errors. If not, the <a href=\"https://www.pylint.org/\">pylint</a> output won&#39;t be shown.</li>\n<li><em>Program</em> is the path to the program to be executed. No parameters can be passed here</li>\n<li>The <em>params</em> section gives the parameters to the executed program. <em>$FilePath$</em> is a <em>macro</em>. All the available macros can be selected with the right button. <em>$FilePath$</em> is changed to the selected file path when the fuinction is launched</li>\n<li>The <em>working directory</em> section indicates the directory the order will be executed from. I&#39;ve set it with a macro to the project root path</li>\n</ul>\n<p>You can run the pylint script by going to <em>tools-&gt;External tools-&gt;pylint</em> when you have a file open or right clicking the file name at the project pane.</p>\n<h1 id=\"coverage\">coverage</h1>\n<p><a href=\"https://coverage.readthedocs.org/en/coverage-4.0.3/\">coverage.py</a> is a tool to check if all the lines are executed in a module when a test for this module is run. With it is easy to know if all the coded possibilities have been tested. We could use the script directly, but since PyCharm uses <a href=\"https://nose.readthedocs.org/en/latest/\">nose</a> to run the tests and gives a nice output and nose can <a href=\"http://nose.readthedocs.org/en/latest/plugins/cover.html\">integrate the coverage.py script</a>, I&#39;ve configured the later to give the test result and coverage at once.</p>\n<p>To run the test with the coverage option, some flags have to be applied (all the options <a href=\"http://nose.readthedocs.org/en/latest/plugins/cover.html\">here</a>):</p>\n<ul>\n<li>--with-coverage enables the coverage</li>\n<li>--cover-package restricts the coverage to the specified packages (more than one can be specified separating with commas). When the flag is not enable, all the dependencies will be checked, with all the libraries used, so the result can be difficult to read. This is the point that gave me some troubles</li>\n<li>--cover-tests Covers the modules and tests. Can be useful to check if all the test has been run (if you use some condition inside them, for instance)</li>\n<li>--cover-erase Reset the results before running the tests. If tests are not erased, the output results can be confusing if the changed code is not covered but it was in a previous version</li>\n</ul>\n<p>I didn&#39;t find a really satisfactory way to integrate coverage in PyCharm community, so I&#39;ll show three ways to do it:</p>\n<h2 id=\"modifying-the-run-parameters\">Modifying the run parameters</h2>\n<p>Once a test is created, go to <em>Run-&gt;Edit Configurations</em> and find the configuration for the test you want to use. Edit it and add to the <em>params</em> text box:</p>\n<p><em>--with-coverage --cover-erase --cover-package package_name</em></p>\n<p>Now, when running the test, the console will output the coverage result</p>\n<ul>\n<li>Pros: The output keeps the test result view</li>\n<li>Cons: You have to configure it for each test. The package name has to be changed each times</li>\n</ul>\n<h2 id=\"adding-an-external-tool\">Adding an external tool</h2>\n<p>As in the pylint case, an external tool can be set: Open <em>File-&gt;Settings-&gt;Tools-&gt;External tools</em> and click the <em>+</em> button.</p>\n<img src=\"/images/python/pycharm-coverage/coverage1.png\"/>\n\n<ul>\n<li>The program is <em>nosetests3</em> in my case, since I&#39;m running a python3 project</li>\n<li>The parameters are the same as in the other case, but calling the macro <em>$Prompt$</em> to give the name of the packages. This will open a window to ask which packages to check</li>\n</ul>\n<p>You can call the coverage script using <em>tools-&gt;External tools-&gt;noseCoverage</em></p>\n<ul>\n<li>Pros: The tool can be called from any test</li>\n<li>Cons: The package name has to be written every time. The output is only at the console, without the test pane.</li>\n</ul>\n<h2 id=\"calling-a-script-from-an-external-tool\">Calling a script from an external tool</h2>\n<p>The external tool way could be improved if the packages where automatically called instead of opening a window. Unfortunately, I haven&#39;t been able to execute code inside the <em>parameters</em> field, so the solution is creating an external file with the following command:\n\nnosetests3 --with-coverage --cover-erase --cover-tests --cover-package <code>echo */|sed &#39;s/\\///g&#39;|sed &#39;s/ /,/g&#39;</code>\n\nAnd then, create the <em>external tool</em> this way:</p>\n<img src=\"/images/python/pycharm-coverage/coverage2.png\"/>\n\n<ul>\n<li>All the available packages are passed to the <em>--cover-package</em> option so no prompt is needed</li>\n<li>Since the <em>working directory</em> is set to the project root, the paths are at the correct point</li>\n</ul>\n<p>I haven&#39;t been able to pass the <em>echo</em> part inside the parameters field, PyCharm avoids executing it.</p>\n<ul>\n<li>Pros: The most automatic way I have found to do it</li>\n<li>Cons: Requires an external script, which I don&#39;t like</li>\n</ul>\n","tags":["PyCharm","coverage","lint"],"date":"2016-02-15T00:00:00.000Z"}