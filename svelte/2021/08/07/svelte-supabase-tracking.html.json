{"title":"A tracking tool with Supabase and Svelte","contents":"<p>In the <a href=\"https://geoexamples.com/svelte/2021/07/18/svelte-supabase-maps.html\">previous post</a> I explained a fast way to use <a href=\"https://supabase.io/\">Supabase</a> with Svelte to store and show geographical data. Supabase offers a really cool way to use websockets so the page updates when some data in the database changes. They call it <em>subscription</em> and it&#39;s adding <em>subscribe()</em> function on a <em>select</em>.</p>\n<p>So I created this new example. On a mobile phone (allowing geolocation), we write the location into the database, and on another device you can follow the position in real-time. Everything without having to install any library except for Supabase! You can <a href=\"https://github.com/rveciana/supabase-svelte\">get the source code</a> and see the <a href=\"https://geoexamples.com/supabase-svelte/\">demo page</a>. When using on a mobile device, always use https or the geolocation will be deactivated.</p>\n<h1 id=\"the-app\">The app</h1>\n<p>The first screen asks if you want to create a track or follow one:</p>\n<img src=\"/images/svelte/svelte-supabase-track/initial.png\" />\n\n<p>When selecting <em>Start a new track</em>, a random name will be assigned to it so it&#39;s possible to use it with the option <em>Follow track</em> from any other device.</p>\n<p>In both cases, you will see the map with the track:</p>\n<img src=\"/images/svelte/svelte-supabase-track/map.png\" />\n\n\n<h1 id=\"supabase\">Supabase</h1>\n<p>To run this project, we&#39;ll use a single table. The table looks like this:</p>\n<img src=\"/images/svelte/svelte-supabase-track/table.png\" />\n\n<ul>\n<li><p>The <em>name</em> field will be used to follow a single track. Only who has created it knows the name, so you can follow only your tracks</p>\n</li>\n<li><p><em>geometry</em> has the track, which is a <em>linestring</em>. Ideally, it could be a <em>multilinestring</em> and divide the track in sections if the GPS stops or something, but this is out of the scope for a simple demo</p>\n</li>\n<li><p>The geometry column is created running:</p>\n<p>  SELECT AddGeometryColumn (&#39;&#39;,&#39;tracks&#39;,&#39;geom&#39;,4326,&#39;LINESTRING&#39;,2);</p>\n</li>\n</ul>\n<p>So it&#39;s that easy! Now, the function to add a new point:</p>\n<p><pre><code>create or replace <span class=\"token keyword\">function</span> <span class=\"token function\">addTrackPoint</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">track_name varchar<span class=\"token punctuation\">,</span> lon float<span class=\"token punctuation\">,</span> lat float</span><span class=\"token punctuation\">)</span>\nreturns <span class=\"token constant\">SETOF</span> tracks <span class=\"token keyword\">as</span>\n$\ndeclare\nreturn_record tracks<span class=\"token operator\">%</span>rowtype<span class=\"token punctuation\">;</span>\nbegin\n\n  update tracks <span class=\"token keyword\">set</span> geom <span class=\"token operator\">=</span> <span class=\"token function\">ST_AddPoint</span><span class=\"token punctuation\">(</span>geom<span class=\"token punctuation\">,</span>\n      <span class=\"token function\">ST_SetSRID</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">ST_MakePoint</span><span class=\"token punctuation\">(</span>lon<span class=\"token punctuation\">,</span> lat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">4326</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n      <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  <span class=\"token punctuation\">)</span>\n   where name <span class=\"token operator\">=</span> track_name\n  returning <span class=\"token operator\">*</span>\n    into return_record<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> found then\n    <span class=\"token keyword\">return</span> next return_record<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> \n    insert into  <span class=\"token function\">tracks</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> geom<span class=\"token punctuation\">)</span> <span class=\"token function\">values</span> <span class=\"token punctuation\">(</span>track_name<span class=\"token punctuation\">,</span> <span class=\"token function\">ST_MakeLine</span><span class=\"token punctuation\">(</span>\n          <span class=\"token constant\">ARRAY</span><span class=\"token punctuation\">[</span><span class=\"token function\">ST_SetSRID</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">ST_MakePoint</span><span class=\"token punctuation\">(</span>lon<span class=\"token punctuation\">,</span> lat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">4326</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    returning <span class=\"token operator\">*</span>\n    into return_record<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> next return_record<span class=\"token punctuation\">;</span>\n\n  end <span class=\"token keyword\">if</span><span class=\"token punctuation\">;</span>\n\nend<span class=\"token punctuation\">;</span>\n$\nlanguage plpgsql<span class=\"token punctuation\">;</span>\n</code></pre></p>\n<p>So, since we don&#39;t have a real backend, only SQL calls, the logic has to go in the database itself, which is good to remember the SQL you forgot!</p>\n<p>The idea is sending a longitude and latitude so the geometry updates adding the new point and returns the data with the new <em>linestring</em> back to the user.</p>\n<ul>\n<li>We want to get the result of the insert, so we declare the type as the table row type and use the <em>returning</em> clause so we can get the updated linestring directly after inserting a new point</li>\n<li>PostGIS has many functions to manipulate geometries. For the update, we use <em>ST_AddPoint</em> and <em>ST_MakeLine</em> for the insert</li>\n<li>We are actually using an <em>upsert</em> which means inserting when the record doesn&#39;t exist and updating it otherwise.  The <em>if found then</em> part is the one that checks the update result and runs the insert if nothing was updated.</li>\n<li>A new point can be added now from the Supabase library:</li>\n</ul>\n<p><pre><code><span class=\"token keyword\">await</span> supabase\n            <span class=\"token punctuation\">.</span><span class=\"token function\">rpc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addtrackpoint'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>track_name<span class=\"token operator\">:</span> trackName<span class=\"token punctuation\">,</span> lon<span class=\"token operator\">:</span> lng<span class=\"token punctuation\">,</span> lat<span class=\"token operator\">:</span>lat<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></p>\n<p>Or using SQL, with:</p>\nSELECT addtrackpoint(&#39;track_name&#39;, lon, lat)<h1 id=\"svelte-code\">Svelte Code</h1>\n<p>You can <a href=\"https://github.com/rveciana/supabase-svelte\">check the code on GitHub</a>, I&#39;ll comment on the basic points only:</p>\n<ul>\n<li><a href=\"https://geoexamples.com/svelte/2021/07/18/svelte-supabase-maps.html\">Check the last post</a> to see how I created the basic project</li>\n<li>I created two stores in at stores.ts</li>\n</ul>\n<p><pre><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> writable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'svelte/store'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> track <span class=\"token operator\">=</span> <span class=\"token function\">writable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">\"LineString\"</span><span class=\"token punctuation\">,</span> \n    coordinates<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> mapCenter <span class=\"token operator\">=</span> <span class=\"token function\">writable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></p>\n<p>Doing it like this, we don&#39;t re-render all the map if we have to pass the <em>linestring</em> as a <em>prop</em>, since only the track component will listen to the store. The store can be updated on the root component. <em>mapCenter</em> is used to set the center of the map when opening or creating a track.</p>\n<ul>\n<li>The <em>Map</em> Component uses <a href=\"https://ngyewch.github.io/svelte-leaflet/\">svelte-leaflet</a> to create the map. This allows using <em>leaflet</em> as components. Check its docs to see how it&#39;s installed (or take a look at the <em>rollup.config.js</em> file in the project)</li>\n</ul>\n<p><pre><code><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>LeafletMap<span class=\"token punctuation\">,</span> TileLayer<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'svelte-leafletjs'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">import</span> MapTrack <span class=\"token keyword\">from</span> <span class=\"token string\">'./MapTrack.svelte'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mapCenter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./store.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> mapCenterValue<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> unsubscribe <span class=\"token operator\">=</span> mapCenter<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    mapCenterValue <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mapOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    center<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>mapCenterValue<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mapCenterValue<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    zoom<span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> tileUrl <span class=\"token operator\">=</span> <span class=\"token string\">\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> tileLayerOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    minZoom<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    maxZoom<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n    maxNativeZoom<span class=\"token operator\">:</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span>\n    attribution<span class=\"token operator\">:</span> <span class=\"token string\">\"© OpenStreetMap contributors\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> leafletMap<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>LeafletMap bind<span class=\"token operator\">:</span><span class=\"token keyword\">this</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>leafletMap<span class=\"token punctuation\">}</span> options<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>mapOptions<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>TileLayer url<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>tileUrl<span class=\"token punctuation\">}</span> options<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>tileLayerOptions<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>MapTrack<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>LeafletMap<span class=\"token operator\">></span>\n</code></pre></p>\n<p>The store is used to get the center of the map and a <em>MapTrack</em> component is added to show the track. This way, when the track updates, only this layer is re-rendered, which is much more efficient.</p>\n<ul>\n<li>The <em>MapTrack</em> component looks like this:</li>\n</ul>\n<p><pre><code><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Tooltip<span class=\"token punctuation\">,</span> Polyline<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'svelte-leafletjs'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> track <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./store.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> trackValue<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> unsubscribe <span class=\"token operator\">=</span> track<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    trackValue <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>Polyline latLngs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>trackValue<span class=\"token punctuation\">.</span>coordinates<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token operator\">=></span><span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> color<span class=\"token operator\">=</span><span class=\"token string\">\"#000000\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Tooltip<span class=\"token operator\">></span>Resorts World Sentosa to Vivo City<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Tooltip<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Polyline<span class=\"token operator\">></span>\n</code></pre></p>\n<p>Using the store makes it so easy!</p>\n<ul>\n<li>The <em>App.svelte</em> file is the one that does most of the job:</li>\n</ul>\n<p><pre><code><span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span>\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> supabase <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./supabaseClient\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">import</span> type <span class=\"token punctuation\">{</span> RealtimeSubscription <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@supabase/supabase-js'</span>\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> onMount <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'svelte'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> uniqueNamesGenerator<span class=\"token punctuation\">,</span> adjectives<span class=\"token punctuation\">,</span> colors<span class=\"token punctuation\">,</span> animals <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'unique-names-generator'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">import</span> Map <span class=\"token keyword\">from</span> <span class=\"token string\">'./Map.svelte'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> convertWkb <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./read-wkb'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> track<span class=\"token punctuation\">,</span> mapCenter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./store.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> lng <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> lat <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> mode<span class=\"token operator\">:</span><span class=\"token string\">\"read\"</span><span class=\"token operator\">|</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> trackName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> mySubscription<span class=\"token operator\">:</span>RealtimeSubscription\n\n<span class=\"token function\">onMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>geolocation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            navigator<span class=\"token punctuation\">.</span>geolocation<span class=\"token punctuation\">.</span><span class=\"token function\">watchPosition</span><span class=\"token punctuation\">(</span>displayLocationInfo<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ERROR\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> enableHighAccuracy<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">:</span><span class=\"token number\">60000</span><span class=\"token punctuation\">,</span> maximumAge<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NO GEOLOCATION\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">displayLocationInfo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span>  <span class=\"token punctuation\">(</span><span class=\"token parameter\">position<span class=\"token operator\">:</span> GeolocationPosition</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    lng <span class=\"token operator\">=</span> position<span class=\"token punctuation\">.</span>coords<span class=\"token punctuation\">.</span>longitude<span class=\"token punctuation\">;</span>\n    lat <span class=\"token operator\">=</span> position<span class=\"token punctuation\">.</span>coords<span class=\"token punctuation\">.</span>latitude<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mode <span class=\"token operator\">===</span> <span class=\"token string\">\"write\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> supabase\n            <span class=\"token punctuation\">.</span><span class=\"token function\">rpc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addtrackpoint'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>track_name<span class=\"token operator\">:</span> trackName<span class=\"token punctuation\">,</span> lon<span class=\"token operator\">:</span> lng<span class=\"token punctuation\">,</span> lat<span class=\"token operator\">:</span>lat<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        data<span class=\"token punctuation\">.</span>length<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> track<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>geom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"New position\"</span><span class=\"token punctuation\">,</span> lng<span class=\"token punctuation\">,</span> lat<span class=\"token punctuation\">,</span> <span class=\"token string\">\"-->\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>geom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">startWrite</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    trackName <span class=\"token operator\">=</span> <span class=\"token function\">uniqueNamesGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          dictionaries<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>adjectives<span class=\"token punctuation\">,</span> colors<span class=\"token punctuation\">,</span> animals<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        separator<span class=\"token operator\">:</span> <span class=\"token string\">\"-\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> supabase\n        <span class=\"token punctuation\">.</span><span class=\"token function\">rpc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addtrackpoint'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>track_name<span class=\"token operator\">:</span> trackName<span class=\"token punctuation\">,</span> lon<span class=\"token operator\">:</span> lng<span class=\"token punctuation\">,</span> lat<span class=\"token operator\">:</span>lat<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    mode <span class=\"token operator\">=</span> <span class=\"token string\">\"write\"</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Writes\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mapCenter<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>lng<span class=\"token punctuation\">,</span> lat<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    data<span class=\"token punctuation\">.</span>length<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> track<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>geom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">startRead</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> supabase\n            <span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tracks'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'eq'</span><span class=\"token punctuation\">,</span> trackName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    data<span class=\"token punctuation\">.</span>length<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> track<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>geom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    data<span class=\"token punctuation\">.</span>length<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> mapCenter<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>geom<span class=\"token punctuation\">.</span>coordinates<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mode <span class=\"token operator\">=</span> <span class=\"token string\">\"read\"</span><span class=\"token punctuation\">;</span>\n    mySubscription <span class=\"token operator\">=</span> supabase\n        <span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">tracks:name=eq.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>trackName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">payload</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> newTrack <span class=\"token operator\">=</span> <span class=\"token function\">convertWkb</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">.</span>geom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Change received!'</span><span class=\"token punctuation\">,</span> newTrack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            track<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>newTrack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span> style<span class=\"token operator\">=</span><span class=\"token string\">\"width: 100%; height: 100%;\"</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>#<span class=\"token keyword\">if</span> mode<span class=\"token operator\">===</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token constant\">READ</span> <span class=\"token punctuation\">{</span>trackName<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Map<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">:</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> mode<span class=\"token operator\">===</span><span class=\"token string\">\"write\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token constant\">WRITE</span> <span class=\"token punctuation\">{</span>trackName<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Map<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">:</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>input placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"track name\"</span> bind<span class=\"token operator\">:</span>value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>trackName<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>button on<span class=\"token operator\">:</span>click<span class=\"token operator\">|</span>once<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>startRead<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Follow a track<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>button on<span class=\"token operator\">:</span>click<span class=\"token operator\">|</span>once<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>startWrite<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Start a <span class=\"token keyword\">new</span> <span class=\"token class-name\">track</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">/</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n</code></pre>\n\n<p>Let&#39;s see the most important parts:</p>\n<ul>\n<li><em>mode</em> can be <em>read</em>, <em>write</em>, or <em>undefined</em>, which are the three states that the app can have. Undefined allows the user to choose if he wants to create a track or follow it. The form calls either <em>startRead</em> or <em>startWrite</em> that changes this <em>mode</em> variable.</li>\n<li>On mounting the component, the geolocation is started. This way, the <em>lon</em> and <em>lat</em> variables will be filled and ready if we want to start a new track<ul>\n<li><em>displayLocationInfo</em> is the function that gets the position and calls the function in the database to store a new point if we are in the <em>write</em> mode</li>\n</ul>\n</li>\n<li><em>startWrite</em> creates a random name using the <em>unique-names-generator</em> library. It will be always an adjective-color-animal sequence. Then, uses the same function to add the first point and sets the map center.</li>\n<li><em>startRead</em> is quite similar but starts a new subscription. Notice that subscriptions don&#39;t use filters as in the other cases, but changes the <em>from</em> function to <em>table:name=operator:value</em><ul>\n<li>See the next point to see why do we call the <em>convertWkb</em> function</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"wkb\">WKB</h1>\n<p>When using the real-time feature, the result is given in WKB format because Supabase doesn&#39;t run any conversion function as it does the select function (strange). WKB is a hex representation of a binary string with geometries. You can see a nice <a href=\"https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry#Well-known_binary\">explanation at Wikipedia</a>. If you have this string you can insert the data into the database without functions (and using Supabase, with the <em>insert()</em> function). The problem is that I wasn&#39;t able to find a library that makes the conversion in Javascript. There&#39;s <a href=\"https://github.com/cschwarz/wkx\">wkx.js</a>, but I wasn&#39;t able to use it in a ES6 style (import wkb from &#39;wkt&#39;). If somebody knows how to do it, please tell me, it&#39;s the main piece to work with all these tools properly.</p>\n<p>So I created this small function that decodes a <em>linestring</em> from WKB to GeoJSON</p>\n<p><pre><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> readDoubleBE<span class=\"token punctuation\">,</span> readDoubleLE<span class=\"token punctuation\">,</span> readUInt32LE<span class=\"token punctuation\">,</span> readUInt32BE<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'bops'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">convertWkb</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">wkb<span class=\"token operator\">:</span>string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>wkb<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> isBigEndian <span class=\"token operator\">=</span> wkb<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'00'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> epsg <span class=\"token operator\">=</span> isBigEndian <span class=\"token operator\">?</span> <span class=\"token function\">readUInt32BE</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">readUInt32LE</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> numberOfPoints <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>wkb<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> coordinates <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numberOfPoints<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    coordinates<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">readDoubleLE</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">13</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">readDoubleLE</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">13</span> <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> geoJSON <span class=\"token operator\">=</span>  <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">\"LineString\"</span><span class=\"token punctuation\">,</span> \n    coordinates<span class=\"token operator\">:</span> coordinates\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">return</span> geoJSON<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></p>\n<ul>\n<li><a href=\"https://github.com/chrisdickinson/bops\">bops</a> library is used as a replacement for the nodejs buffer function. It will convert from hex to the types we need</li>\n<li>I play with some numbers to get the proper position of the bytes for each point. I know that is a simple linestring so I can iterate only once</li>\n<li>The format is actually EWKT, that adds the projection code (SRID, which is 4326, so WGS84 in our case)</li>\n</ul>\n<h1 id=\"links\">Links</h1>\n<ul>\n<li><a href=\"https://github.com/rveciana/supabase-svelte\">Example source code</a></li>\n<li><a href=\"https://geoexamples.com/supabase-svelte/\">Working example</a></li>\n<li><a href=\"https://geoexamples.com/svelte/2021/07/18/svelte-supabase-maps.html\">Previous Post</a></li>\n<li><a href=\"https://supabase.io/\">Supabase</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry#Well-known_binary\">WKB</a></li>\n<li><a href=\"https://github.com/cschwarz/wkx\">wkx.js</a></li>\n<li><a href=\"https://github.com/chrisdickinson/bops\">bops</a></li>\n<li><a href=\"https://ngyewch.github.io/svelte-leaflet/\">Svelte Leaflet</a></li>\n</ul>\n","tags":["supabase","postgis"],"date":"2021-08-07T18:40:53.000Z","thumbnail":"/images/svelte/svelte-supabase-track/twitter.png"}