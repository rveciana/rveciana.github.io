{"title":"Mapping with supabase and Svelte","contents":"<p>I discovered <a href=\"https://supabase.io/\">supabase</a> some days ago as a substitute for Firebase. As it was using PostgreSQL as the database, I checked if it had extensions and yes! it&#39;s got PostGIS and all its siblings!</p>\n<p>Using supabase is not that straightforward, but it&#39;s not that difficult, so supabase can be a great solution if your backend it&#39;s not really complex.</p>\n<img src=\"/images/svelte/svelte-supabase/map.png\" />\n\n<p>We&#39;ll show the user&#39;s point data on a map, a list and will let them add new points too.  You can see the <a href=\"https://bl.ocks.org/rveciana/raw/ca929e406e6bac979cd7a7f263303bad/?raw=true\">working example here</a>.</p>\n<h2 id=\"installation\">Installation</h2>\n<p>The first step will be creating your supabase account, of course. Then, set up a Svelte project.</p>\n<p>I used the <a href=\"https://supabase.io/docs/guides/with-svelte#initialize-a-svelte-app\">supabase tutorial for Svelte</a> to do it. Basically, you need to set the <em>.env</em> file with your keys (check at your supabase account)</p>\nSVELTE_APP_SUPABASE_URL=THE_URL\nSVELTE_APP_SUPABASE_ANON_KEY=THE_KEY<p>This will be used in a file called <em>supabaseClient.js</em> that connects to the service:</p>\n<p><pre><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@supabase/supabase-js'</span>\n\n<span class=\"token keyword\">const</span> supabaseUrl <span class=\"token operator\">=</span> __api<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SVELTE_APP_SUPABASE_URL</span>\n<span class=\"token keyword\">const</span> supabaseAnonKey <span class=\"token operator\">=</span> __api<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SVELTE_APP_SUPABASE_ANON_KEY</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> supabase <span class=\"token operator\">=</span> <span class=\"token function\">createClient</span><span class=\"token punctuation\">(</span>supabaseUrl<span class=\"token punctuation\">,</span> supabaseAnonKey<span class=\"token punctuation\">)</span>\n</code></pre></p>\n<p>Then, the data can be accessed like this (that would get all the elements from the <em>geometries</em> table)</p>\n<p><pre><code>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@supabase/supabase-js'</span>\n\n<span class=\"token keyword\">const</span> supabaseUrl <span class=\"token operator\">=</span> __api<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SVELTE_APP_SUPABASE_URL</span>\n<span class=\"token keyword\">const</span> supabaseAnonKey <span class=\"token operator\">=</span> __api<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SVELTE_APP_SUPABASE_ANON_KEY</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> supabase <span class=\"token operator\">=</span> <span class=\"token function\">createClient</span><span class=\"token punctuation\">(</span>supabaseUrl<span class=\"token punctuation\">,</span> supabaseAnonKey<span class=\"token punctuation\">)</span>\n</code></pre></p>\n<h2 id=\"creating-the-table\">Creating the table</h2>\n<p>This is the first place where we find problems, because the wizard doesn&#39;t accept the geometry types.</p>\n<p>So first, activate the PostGIS extension at the <em>database -&gt; extensions</em> menu</p>\n<p>Then, at the tables section, create a table (I&#39;ll call it <em>geometries</em>) with the id and a name field of type <em>varchar</em></p>\n<p>As you can&#39;t add the geom column, go to the <em>sql</em> section and run </p>\n<p><pre><code><span class=\"token constant\">SELECT</span> <span class=\"token function\">AddGeometryColumn</span> <span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span><span class=\"token string\">'geometries'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'geom'</span><span class=\"token punctuation\">,</span><span class=\"token number\">4326</span><span class=\"token punctuation\">,</span><span class=\"token string\">'POINT'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></p>\n<p>The first argument is the schema (public or nothing in our case), the second the table and then the column name, type, projection SRID and dimensions</p>\n<p>The table can be now used, but we can&#39;t insert geometries unless we have them in WKB format. <a href=\"https://github.com/cschwarz/wkx\">WKX</a> is a library that does this, but I wasn&#39;t able to make it work with Svelte&#39;s rollup. I get this <a href=\"http://5.9.10.113/44315937/issues-importing-wkx-to-convert-wkb-to-wkt\">unsolved bug</a>. Without being able to create the WKB format, we have to use PostGIS to do it for us, but the insert function accepts only values. The solution is using a stored procedure. Open the SQL section and run:\n<pre><code>create or replace <span class=\"token keyword\">function</span> <span class=\"token function\">addGeomerty</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">location_name varchar<span class=\"token punctuation\">,</span> lon float<span class=\"token punctuation\">,</span> lat float</span><span class=\"token punctuation\">)</span>\nreturns <span class=\"token constant\">SETOF</span> geometries <span class=\"token keyword\">as</span>\n$\ndeclare\nreturn_record geometries<span class=\"token operator\">%</span>rowtype<span class=\"token punctuation\">;</span>\nbegin\n  insert into  <span class=\"token function\">geometries</span><span class=\"token punctuation\">(</span>location_name<span class=\"token punctuation\">,</span> geom<span class=\"token punctuation\">)</span> <span class=\"token function\">values</span> <span class=\"token punctuation\">(</span>location_name<span class=\"token punctuation\">,</span> <span class=\"token function\">ST_SetSRID</span><span class=\"token punctuation\">(</span><span class=\"token function\">ST_MakePoint</span><span class=\"token punctuation\">(</span>lon<span class=\"token punctuation\">,</span> lat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4326</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   returning <span class=\"token operator\">*</span>\n   into return_record<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> next return_record<span class=\"token punctuation\">;</span>\nend\n$\nlanguage plpgsql<span class=\"token punctuation\">;</span>\n</code></pre></p>\n<p>This function will take the name, longitude and latitude and, besides inserting the name, uses postgis to calculate the geometry (<em>st_MakePoint</em>).\nIt&#39;s returning the new value so we don&#39;t have to query the data again to how the new point.</p>\n<img src=\"/images/svelte/svelte-supabase/table.png\"/>\n\n<h2 id=\"svelte-components\">Svelte components</h2>\n<p>We&#39;ll use two components, one for the map and the other for the rest. Let&#39;s see the map:</p>\n<p><pre><code><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> geoEqualEarth<span class=\"token punctuation\">,</span> geoPath <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"d3-geo\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> onMount <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"svelte\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> feature <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"topojson\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> points<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> data<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> projection <span class=\"token operator\">=</span> <span class=\"token function\">geoEqualEarth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">geoPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">projection</span><span class=\"token punctuation\">(</span>projection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">onMount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"https://gist.githubusercontent.com/rveciana/502db152b70cddfd554e9d48ee23e279/raw/cc51c1b46199994b123271c629541d417f2f7d86/world-110m.json\"</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> land <span class=\"token operator\">=</span> <span class=\"token function\">feature</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>land<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  data <span class=\"token operator\">=</span> <span class=\"token function\">path</span><span class=\"token punctuation\">(</span>land<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>style<span class=\"token operator\">></span>\n    svg <span class=\"token punctuation\">{</span>\n      width<span class=\"token operator\">:</span> <span class=\"token number\">960</span>px<span class=\"token punctuation\">;</span>\n      height<span class=\"token operator\">:</span> <span class=\"token number\">500</span>px<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span>border <span class=\"token punctuation\">{</span>\n      stroke<span class=\"token operator\">:</span> #<span class=\"token number\">444444</span><span class=\"token punctuation\">;</span>\n      fill<span class=\"token operator\">:</span> #cccccc<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>svg width<span class=\"token operator\">=</span><span class=\"token string\">\"960\"</span> height<span class=\"token operator\">=</span><span class=\"token string\">\"500\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>path d<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"border\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>#each points<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token operator\">=></span>d<span class=\"token punctuation\">.</span>geom<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> point<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>circle r<span class=\"token operator\">=</span><span class=\"token number\">10</span> cx<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">projection</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span>geom<span class=\"token punctuation\">.</span>coordinates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> cy<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">projection</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span>geom<span class=\"token punctuation\">.</span>coordinates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>each<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>svg<span class=\"token operator\">></span>\n</code></pre></p>\n<p>This is a regular d3 map. <em>export let points;</em> gets the points from the props and adds them on the map. Points are in geoJSON format, and inside the <em>geom</em> column. That&#39;s why the values are got like <em>point.geom.coordinates</em>.</p>\n<p>The main component of the site is <em>App.svelte</em>:</p>\n<p><pre><code><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n    <span class=\"token keyword\">import</span> Map <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Map.svelte\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> supabase <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./supabaseClient\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> geometries<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> newPointName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> newPointLon<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> newPointLat<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> loading <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    $<span class=\"token operator\">:</span> areValuesValid <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>newPointName <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>newPointLat<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>newPointLon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> supabase\n        <span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'geometries'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        geometries <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSubmit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>areValuesValid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            loading <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n            <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> dataInsert<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> supabase<span class=\"token punctuation\">.</span><span class=\"token function\">rpc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addgeomerty'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>location_name<span class=\"token operator\">:</span> newPointName<span class=\"token punctuation\">,</span> lon<span class=\"token operator\">:</span> newPointLon<span class=\"token punctuation\">,</span> lat<span class=\"token operator\">:</span>newPointLat<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            geometries <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>geometries<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>dataInsert<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> error\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">.</span>error_description <span class=\"token operator\">||</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            loading <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span> style<span class=\"token operator\">=</span><span class=\"token string\">\"padding: 50px 0 100px 0;\"</span> use<span class=\"token operator\">:</span>getData<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>#each geometries <span class=\"token keyword\">as</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> location_name<span class=\"token punctuation\">,</span> geom <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">-</span><span class=\"token punctuation\">{</span>location_name<span class=\"token punctuation\">}</span><span class=\"token operator\">-</span><span class=\"token punctuation\">{</span>geom <span class=\"token operator\">&amp;&amp;</span> geom<span class=\"token punctuation\">.</span>coordinates<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>each<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>Map points<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>geometries<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>form <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"row flex flex-center\"</span> on<span class=\"token operator\">:</span>submit<span class=\"token operator\">|</span>preventDefault<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"col-6 form-widget\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>p <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"description\"</span><span class=\"token operator\">></span>Add a <span class=\"token keyword\">new</span> <span class=\"token class-name\">point</span> to the map\n          <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>input\n              <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"inputField\"</span>\n              type<span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span>\n              placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Name\"</span>\n              bind<span class=\"token operator\">:</span>value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newPointName<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>input\n              <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"inputField\"</span>\n              type<span class=\"token operator\">=</span><span class=\"token string\">\"number\"</span>\n              step<span class=\"token operator\">=</span><span class=\"token string\">\"0.01\"</span>\n              placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Longitude\"</span>\n              bind<span class=\"token operator\">:</span>value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newPointLon<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>input\n              <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"inputField\"</span>\n              type<span class=\"token operator\">=</span><span class=\"token string\">\"number\"</span>\n              step<span class=\"token operator\">=</span><span class=\"token string\">\"0.01\"</span>\n              placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Latitude\"</span>\n              bind<span class=\"token operator\">:</span>value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newPointLat<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">'button block'</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>loading <span class=\"token operator\">?</span> <span class=\"token string\">\"Loading\"</span> <span class=\"token operator\">:</span> areValuesValid <span class=\"token operator\">?</span> <span class=\"token string\">\"Upload point\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Enter valid values\"</span><span class=\"token punctuation\">}</span> disabled<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>loading <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>areValuesValid<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n</code></pre>\n\n<p>The two <em>supabase</em> related chunks are:</p>\n<p><pre><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> supabase\n        <span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'geometries'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></p>\n<p>That retrieves the data (all rows, in a real app this should be limited)</p>\n<p><pre><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> dataInsert<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> supabase<span class=\"token punctuation\">.</span><span class=\"token function\">rpc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addgeomerty'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>location_name<span class=\"token operator\">:</span> newPointName<span class=\"token punctuation\">,</span> lon<span class=\"token operator\">:</span> newPointLon<span class=\"token punctuation\">,</span> lat<span class=\"token operator\">:</span>newPointLat<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\ngeometries <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>geometries<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>dataInsert<span class=\"token punctuation\">]</span>\n</code></pre>\nThis calls the function and gets its results. The newly created rows are added to the existing ones so the data is in sync with the server.</p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"https://bl.ocks.org/rveciana/raw/ca929e406e6bac979cd7a7f263303bad/?raw=true\">Working example</a></li>\n<li><a href=\"https://supabase.io/\">supabase</a></li>\n<li><a href=\"https://supabase.io/docs/guides/with-svelte#initialize-a-svelte-app\">supabase and Svelte setup tutorial</a></li>\n<li><a href=\"https://github.com/cschwarz/wkx\">wkx library</a></li>\n<li><a href=\"http://5.9.10.113/44315937/issues-importing-wkx-to-convert-wkb-to-wkt\">wkx bug</a></li>\n<li><a href=\"https://medium.com/geekculture/using-stored-procedures-rpc-in-supabase-to-increment-a-like-counter-9c5b2293a65b\">using a PostgreSQL function</a></li>\n</ul>\n","tags":["supabase","postgis"],"date":"2021-07-18T18:40:53.000Z","thumbnail":"/images/svelte/svelte-supabase/twitter.png"}