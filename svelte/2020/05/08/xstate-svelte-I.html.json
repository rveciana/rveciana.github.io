{"title":"XState and Svelte I: initial setup","contents":"<p>I&#39;m learning <a href=\"https://xstate.js.org/\">XState</a>. Every time I&#39;ve used redux I find myself getting bugs because the site state becames more and more complex and I don&#39;t handle the transitions and possible states properly.</p>\n<p>Also, I love Svelte. Doing the stuff I like in D3js with it is always possible, but coding with a framework that allows much more complex apps.</p>\n<p>But I didn&#39;t find many documentation on using both, so I decided to do this post to show it.</p>\n<p>I&#39;ve using CodeSandbox for all the examples so the result is visible and editable by yourself if you want to.</p>\n<h1 id=\"using-xstate-and-svelte\">Using XState and Svelte</h1>\n<p>The first thing to do is using the XState state instead of the regular svelte store.</p>\n<p>I started the project copying the standard Svelte template from codesandbox, but if working locally, you could just:</p>\nnpx degit sveltejs/template my-svelte-project<p>and install XState by running</p>\nnpm install --save xstate<p>Start the project running</p>\nnpm install\nnpm run dev<p>Now we can create one of the simplest state machine taken from the docs, that just toggles between two states:</p>\n<p><pre><code>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Machine <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"xstate\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> toggleMachine <span class=\"token operator\">=</span> <span class=\"token function\">Machine</span><span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">{</span>\nid<span class=\"token operator\">:</span> <span class=\"token string\">\"toggle\"</span><span class=\"token punctuation\">,</span>\ninitial<span class=\"token operator\">:</span> <span class=\"token string\">\"inactive\"</span><span class=\"token punctuation\">,</span>\nstates<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\ninactive<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\non<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">TOGGLE</span><span class=\"token operator\">:</span> <span class=\"token string\">\"active\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\nactive<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\non<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">TOGGLE</span><span class=\"token operator\">:</span> <span class=\"token string\">\"inactive\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></p>\n<p>As you can see, the initial state would be <em>inactive</em> and can be changed to <em>active</em> by sending the <em>TOGGLE</em> action. Let&#39;s see the javascript file that does this:</p>\n<p><pre><code>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useMachine <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./useMachine\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> toggleMachine <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./toggleMachine\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">,</span> send <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMachine</span><span class=\"token punctuation\">(</span>toggleMachine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TOGGLE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>style<span class=\"token operator\">></span>\n  main <span class=\"token punctuation\">{</span>\n    text<span class=\"token operator\">-</span>align<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span>\n    padding<span class=\"token operator\">:</span> <span class=\"token number\">1</span>em<span class=\"token punctuation\">;</span>\n    max<span class=\"token operator\">-</span>width<span class=\"token operator\">:</span> <span class=\"token number\">240</span>px<span class=\"token punctuation\">;</span>\n    margin<span class=\"token operator\">:</span> <span class=\"token number\">0</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  h1 <span class=\"token punctuation\">{</span>\n    color<span class=\"token operator\">:</span> #ff3e00<span class=\"token punctuation\">;</span>\n    text<span class=\"token operator\">-</span>transform<span class=\"token operator\">:</span> uppercase<span class=\"token punctuation\">;</span>\n    font<span class=\"token operator\">-</span>size<span class=\"token operator\">:</span> <span class=\"token number\">4</span>em<span class=\"token punctuation\">;</span>\n    font<span class=\"token operator\">-</span>weight<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>main<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello <span class=\"token punctuation\">{</span>$state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>button on<span class=\"token operator\">:</span>click<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Toggle<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>main<span class=\"token operator\">></span>\n</code></pre>\n\n<p>As all the svelte projects, every component has three parts with the javsascript, the css and the html template.</p>\n<ul>\n<li>The <em>useMachine</em> will be explained later, but gives access to the current state and the function to send actions. When the state changes, the rendered component will change too. It&#39;s as easy as this!</li>\n<li>To render the value, use <em>{$state.value}</em>. <a href=\"https://svelte.dev/docs#4_Prefix_stores_with_$_to_access_their_values\">The $ indicates that <em>state</em> is a store and the value has to be accessed this way</a>.</li>\n<li><em>handleClick</em> sends the action when the button is pressed. ote the <em>on:click</em> in the button element</li>\n</ul>\n<p>This is the result:</p>\n<iframe\n     src=\"https://codesandbox.io/embed/traffic-lights-hello-xstate-zd2yl?fontsize=14&hidenavigation=1&module=%2FApp.svelte&theme=light\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"traffic-lights-hello-xstate\"\n     allow=\"\"\n     sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n   ></iframe>\n\n<h1 id=\"links\">Links</h1>\n<ul>\n<li><a href=\"https://xstate.js.org/\">XState website</a></li>\n<li><a href=\"https://svelte.dev/docs#4_Prefix_stores_with_$_to_access_their_values\">Accessing a readable store value in Svelte</a></li>\n</ul>\n","tags":["xstate"],"date":"2020-05-08T00:00:00.000Z"}