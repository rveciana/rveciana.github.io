---
import type { MarkdownInstance } from "astro";
import type { Frontmatter } from "../model";

interface Props {
  posts: MarkdownInstance<Frontmatter>[];
}

const { posts } = Astro.props;

type Tags = { [key: string]: number };

const tags = posts.reduce((cur, acc) => {
  const newCur = { ...cur };
  (acc.frontmatter.tags ?? []).forEach(
    (tag) => (newCur[tag] = newCur[tag] ? newCur[tag] + 1 : 1)
  );
  return newCur;
}, {} as Tags);

const maxOccurrencies = Math.max(...Object.values(tags));
---

<h1>Tags</h1>
<div class="tagcloud">
  {
    Object.entries(tags).map(([tag, occurrencies]) => (
      <a
        href={`/tags/${tag}`}
        style={{
          fontSize: `${1 + (0.8 * (occurrencies - 1)) / maxOccurrencies}em`,
        }}
      >
        {tag},{" "}
      </a>
    ))
  }
</div>
<style lang="scss">
  @use "../css/main.scss";
  @use "../css/base.scss";
  @use "../css/layout.scss";
</style>
