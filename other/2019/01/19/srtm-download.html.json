{"title":"SRTM data download","contents":"<p>The <a href=\"https://en.wikipedia.org/wiki/Shuttle_Radar_Topography_Mission\">SRTM mission</a> gives a global coverage web data. It&#39;s not easy to download it, although certain web sites give tools to do it. One of them, <a href=\"http://srtm.csi.cgiar.org/\">the SRTM 90m DEM Digital Elevation Database</a>, allows to do it in 5x5 degrees tiles.</p>\n<p>I made this script to download an arbitrary region that can be re-projected.</p>\n<h2 id=\"complete-code\">Complete code</h2>\n<p>\n#!/usr/bin/env python\n&#39;&#39;&#39;Creates a DEM file downloading the SRTM data and clipping it to the\nspecified bounding box\n&#39;&#39;&#39;\nimport argparse\nimport zipfile\nfrom io import BytesIO\nfrom math import ceil, floor\nfrom os.path import exists\n\nimport gdal\nimport numpy\nimport osr\nimport urllib3\n\ndef dem_creator(out_file, epsg, bbox, res):\n<pre><code>latlon = osr.SpatialReference()\nlatlon.ImportFromEPSG(4326)\n\nusr_srs = osr.SpatialReference()\nusr_srs.ImportFromEPSG(epsg)\n\ntransf = osr.CoordinateTransformation(usr_srs, latlon)\n\nlon0, lat1, _ = transf.TransformPoint(bbox[0], bbox[1])\nlon1, lat0, _ = transf.TransformPoint(bbox[2], bbox[3])\n\ntile_x0 = 1 + floor((lon0 + 180) / 5)\ntile_x1 = 1 + ceil((lon1 + 180) / 5)\n\ntile_y0 = 1 + floor((60 - lat0) / 5)\ntile_y1 = 1 + ceil((60 - lat1) / 5)\n\nout_data = numpy.empty((6001 * (tile_y1 - tile_y0),\n                       6001 * (tile_x1 - tile_x0)))\npos_x = 0\npos_y = 0\nfor i in range(tile_x0, tile_x1):\n    for j in range(tile_y0, tile_y1):\n        data = get_data(i, j)\n        out_data[6001 * pos_y:6001 * pos_y + 6001,\n                 6001 * pos_x:6001 * pos_x + 6001] = data\n        pos_y += 1\n    pos_x += 1\n\ndriver = gdal.GetDriverByName(&#39;MEM&#39;)\nd_s = driver.Create(&#39;&#39;, 6001 * (tile_x1 - tile_x0),\n                    6001 * (tile_y1 - tile_y0), 1, gdal.GDT_Int32)\nd_s.GetRasterBand(1).WriteArray(out_data)\nd_s.SetGeoTransform((-180 + 5*(tile_x0-1), 0.000833333333333, 0,\n                     60 - 5*(tile_y0 - 1), 0, -0.000833333333333))\n\nsrs = osr.SpatialReference()\nsrs.ImportFromEPSG(4326)\nd_s.SetProjection(srs.ExportToWkt())\nd_s.GetRasterBand(1).SetNoDataValue(-32768)\n\ngdal.Warp(out_file, d_s, format=&#39;GTIFF&#39;, dstSRS=&#39;EPSG:{}&#39;.format(epsg),\n          outputBounds=bbox,\n          xRes=res[0], yRes=res[1])</code></pre>\ndef get<em>data(i, j):\nurl = \"<a href=\"http://srtm.csi.cgiar.org/wp-content/uploads/files/srtm_5x5/TIFF/srtm\">http://srtm.csi.cgiar.org/wp-content/uploads/files/srtm_5x5/TIFF/srtm</a></em>{:02d}<em>{:02d}.zip\".format(i, j)\nout_file = \"/tmp/srtm</em>{:02d}_{:02d}.tif\".format(i, j)\nif not exists(out_file):\nprint(\"Downloading: \" + url)\nhttp = urllib3.PoolManager()\nr = http.request(&#39;GET&#39;, url)\n<pre><code>    if r.status == 404:\n        return -32768 * numpy.ones((6001, 6001))\n\n    zipdata = BytesIO()\n    zipdata.write(r.data)\n    zip_file = zipfile.ZipFile(zipdata)\n    zip_file.extractall(\"/tmp\")\n    r.release_conn()\n\nd_s = gdal.Open(out_file)\nreturn d_s.ReadAsArray()</code></pre>\nif <strong>name</strong> == &#39;<strong>main</strong>&#39;:\nPARSER = argparse.ArgumentParser(description=&#39;Creates a DEM file &#39; +\n&#39;downloading the SRTM data and &#39; +\n&#39;splitting it to the specified &#39; +\n&#39; bounding box&#39;)\nPARSER.add_argument(&#39;out_file&#39;, type=str,\nhelp=&#39;The out GeoTIFF file&#39;)\nPARSER.add_argument(&#39;epsg&#39;, type=int,\nhelp=&#39;The output file EPSG code&#39;)\nPARSER.add_argument(&#39;bbox&#39;, type=float, nargs=4,\nhelp=&#39;The output file bounding box: xmin ymin xmax ymax&#39;)\nPARSER.add_argument(&#39;resolution&#39;, type=float, nargs=2,\nhelp=&#39;The x and y resolution&#39;)\nARGS = PARSER.parse_args()\n<pre><code>try:\n    dem_creator(ARGS.out_file, ARGS.epsg, ARGS.bbox, ARGS.resolution)\nexcept Exception as err:\n    print(\"An error occurred\")\n    print(err)</code></pre>\n</p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Shuttle_Radar_Topography_Mission\">The SRTM Wikipedia web site</a></li>\n<li><a href=\"http://srtm.csi.cgiar.org/\">The SRTM 90m DEM Digital Elevation Database</a></li>\n</ul>\n<p>The <a href=\"https://es.m.wikipedia.org/wiki/Archivo:P_Space_Shuttle_grey.svg\">space shuttle icon was taken from the Wikipedia</a></p>\n","tags":["SRTM"],"date":"2019-01-19T00:00:00.000Z"}