{"title":"Testing generated images with pixelmatch","contents":"<p>Checking the result of image generation was quite difficult using JavaScript until pixelmatch appeared.</p>\n<p>To test <a href=\"https://github.com/rveciana/d3-composite-projections\">d3-composite-projections</a>, I used to copy the approach of the d3-geo-projection, which used <a href=\"https://imagemagick.org/index.php\">imagemagik</a> and now <a href=\"http://www.graphicsmagick.org/\">graphicsmagick</a>.</p>\n<p>I found that comparing if the expected image was like the libary stopped working if I changed the computer. Slightly different versions of the libraries create different outputs that are visually identically.</p>\n<h2 id=\"pixelmatch\">Pixelmatch</h2>\n<p>Pixelmatch describes itself as</p>\n<blockquote>\n<p>The smallest, simplest and fastest JavaScript pixel-level image comparison library.</p>\n</blockquote>\n<p>It&#39;s got a command line command and can be used from JavaScript on node or the browser, which is what makes it cool for testing.</p>\n<p>The function we need is really simple:</p>\n<pre><code>pixelmatch(img1, img2, output, width, height[, options])</code></pre><p>Where</p>\n<ul>\n<li>img1 and img2 are the images data to compare. We&#39;ll see how to read them</li>\n<li>output is the place to write the image data with the differences (or null, when it writes nothing)</li>\n<li>width and height are the dimensions of the three images</li>\n<li>Options have a threshold option that allows the images to be slightly different, which can be great in some cases.</li>\n</ul>\n<p>The output is the number of pixels that are different, so we&#39;ll check if it&#39;s 0 for testing.</p>\n<p>I&#39;m using tape to make the tests. Because d3js uses it and becase is simple and great.</p>\n<p>The function would be:</p>\n<p><pre><code>\n<span class=\"token function\">tape</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Checks the actual image outputs\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">test</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nprojections<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">await</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>topojson<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> img1 <span class=\"token operator\">=</span> <span class=\"token constant\">PNG</span><span class=\"token punctuation\">.</span>sync<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test/output/\"</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\".png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> img2 <span class=\"token operator\">=</span> <span class=\"token constant\">PNG</span><span class=\"token punctuation\">.</span>sync<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test/samples/\"</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\".png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> diff <span class=\"token operator\">=</span> <span class=\"token function\">pixelmatch</span><span class=\"token punctuation\">(</span>img1<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> img2<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> img1<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> img1<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>threshold<span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>pre<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>code<span class=\"token operator\">></span>    test<span class=\"token punctuation\">.</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">(</span>diff <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" matches the sample file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>code<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>pre<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></p>\n<p>You can check <a href=\"https://github.com/rveciana/d3-composite-projections/blob/v1.2.3/test/render-test.js\">the whole script here</a></p>\n<ul>\n<li>Note that there are many files to test, so a <em>forEach</em> is used to check them</li>\n<li>We&#39;ll see the render function, but it does what it seems, rendering the image</li>\n<li>Note that PNG.sync.read is the method to get the generated images data</li>\n</ul>\n<p>To create the images using canvas, the <em>canvas</em> library is used, so:</p>\n<pre><code>npm install --save-dev canvas</code></pre><p>and require it using</p>\n<pre><code>{createCanvas} = require(&quot;canvas&quot;)</code></pre><p>Then, just get the context using</p>\n<pre><code>context = canvas.getContext(&quot;2d&quot;);</code></pre><p>and use it as in any browser example. Easy!</p>\n<p><a href=\"https://github.com/rveciana/d3-composite-projections/blob/v1.2.3/test/render-test.js\">This file</a> has the whole function.</p>\n<p>Since everything is in JavaScript, node can run all the tests, for functions or rendering from the same tape call:</p>\n<pre><code>tape &#39;test/*-test.js&#39;</code></pre><h2 id=\"using-imagemagik-or-graphicsmagik\">Using ImageMagik or GraphicsMagik</h2>\n<p>If you are curious about the old method, the basic part was using something like:</p>\n<pre><code>compare -metric rmse test/samples/projection.png test/output/projection.png</code></pre><p>This uses <a href=\"https://imagemagick.org/index.php\">ImageMagik</a> to output if the two images are identical. To run the creation, a <a href=\"https://github.com/rveciana/d3-composite-projections/blob/v1.0.2/test/compare-images\">bash script</a> is run. Of course, this makes it difficult to run it in Windows, for instance.</p>\n<p>Newer d3 versions use [GraphicsMagik][graphicsmagik] to do the same. The good thing is that the output is similar to pixelmatch. The bad one is that is a bash script anyway.</p>\n<pre><code>gm compare -type TrueColor -highlight-style assign -highlight-color red -file test/output/$i-difference.png test/output/$i.png img/$i.png;</code></pre><h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"https://github.com/mapbox/pixelmatch\">pixelmatch</a></li>\n<li><a href=\"https://github.com/rveciana/d3-composite-projections\">d3-composite-projections</a></li>\n<li><a href=\"https://imagemagick.org/index.php\">ImageMagik</a></li>\n<li><a href=\"http://www.graphicsmagick.org/\">GraphicsMagick Image Processing System</a></li>\n<li><a href=\"https://github.com/rveciana/d3-composite-projections/blob/v1.0.2/test/compare-images\">ImageMagik bash script</a></li>\n<li><a href=\"https://github.com/substack/tape\">Tape testing</a></li>\n<li><a href=\"https://github.com/rveciana/d3-composite-projections/blob/v1.2.3/test/render-test.js\">Testing example</a></li>\n</ul>\n","tags":["testing"],"date":"2019-09-01T00:00:00.000Z"}