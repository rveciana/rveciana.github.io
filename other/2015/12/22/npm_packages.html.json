{"title":"Creating a D3 NPM package","contents":"<p>Some months ago I created a D3js projection, and published it to NMP and Bower. I wanted to use the opportunity to learn about Nodejs, NPM and so on. I write this post to remember all the steps I followed, and maybe is interesting for someone else.</p>\n<h2 id=\"the-final-code\">The final code</h2>\n<p>The library I will talk about is explained in the <a href=\"/d3/2015/05/12/d3-composite-projections.html\">original d3-composite-projections post</a>. You can download it or take a look to the code at the <a href=\"https://github.com/rveciana/d3-composite-projections\">project&#39;s GitHub page</a>. If you already know how to use npm, just type <code>npm install d3-composite-projections</code>.</p>\n<p>I won&#39;t talk about the code itself, but about the tools I used to create it.</p>\n<h2 id=\"creating-the-nodejs-project\">Creating the nodejs project</h2>\n<p>To create a Nodejs project, the first thing is <a href=\"https://nodejs.org/en/download/\">installing Nodejs</a>, of course. In the same step, <a href=\"https://www.npmjs.com/\">npm</a> will be installed.</p>\n<p>The first thing is initializing the project:</p>\n<p><pre><code>\nnpm init\n</code></pre></p>\n<p>This will prompt some questions and save the information into a file called <em>package.json</em>. You can change the file whenever you want, so mistakes are not very important.</p>\n<p>This <em>package.json</em> file is important to publish the project, since it holds some information, but also for personal use, because stores the information about the dependencies of the project. You only keep your code, and using the command\n<pre><code>\nnpm install\n</code></pre>\nall the dependencies will be downloaded.</p>\n<p>To add a dependency, one of the following:\n<pre><code>\nnpm install name_of_the <span class=\"token keyword\">package</span>\nnpm install <span class=\"token operator\">--</span>save name_of_the <span class=\"token keyword\">package</span>\nnpm install <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev name_of_the <span class=\"token keyword\">package</span>\n</code></pre></p>\n<ul>\n<li>The first will install the dependency, but won&#39;t store it into <em>package.json</em>, so using npm install won&#39;t work in the future installations.</li>\n<li>The second options saves the dependency into the <em>dependencies</em> section, so it will be always downloaded</li>\n<li>The third option will save the dependency into the <em>devDependencies</em> section. This allows to avoid downloading them when you only want to use the library, without developing it. For instance, when other software depends on your library, those won&#39;t be installed.</li>\n</ul>\n<h2 id=\"managing-the-workflow-with-gulp\">Managing the workflow with gulp</h2>\n<p>A task manager is very useful when working with node. Since I&#39;m not using an IDE like Eclipse or NetBeans, all the tasks are run from the command line, and when the project grows a little, running all the commands can be long. Gulp helps you to do all this automatically creating what they call <em>tasks</em>. The tasks use <em>streams</em>, which are remember me a little the unix pipes.</p>\n<p>To <a href=\"https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md\">install gulp</a>, you have to type:\n<pre><code>\nnpm install <span class=\"token operator\">--</span>global gulp\nnpm install <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev gulp\n</code></pre>\nThis will install the dependency at the <em>package.json</em> file.</p>\n<p>Now, a <em>gulpfile.js</em> is needed to run gulp. A minimal one would be:\n<pre><code>\n<span class=\"token keyword\">var</span> gulp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// place code for your default task here</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\nRun it by typing <em>gulp</em>. The task is named <em>default</em>, and is the one run by gulp if no parameter is given. If a task named <em>foo</em> is set, you can run just this one by typing <em>gulp foo</em>. This is useful if there are many tasks and you don&#39;t want to run them all.</p>\n<p>Gulp has many many plugins, that make almost everything you need to manage your files: testing, minifying, linting, moving, uploading, etc. Each plugin has to be installed using <em>npm install --save-dev plugin_name</em>.</p>\n<p>Let&#39;s see some tasks from the <a href=\"https://github.com/rveciana/d3-composite-projections/blob/master/gulpfile.js\">project gulpfile</a>:</p>\n<p><pre><code>\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'build'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> gulp<span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'./src/*.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">gp_newer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'composite-projections.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>extension<span class=\"token operator\">:</span> <span class=\"token string\">'.js'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">gp_strip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">gp_concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'composite-projections.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>gulp<span class=\"token punctuation\">.</span><span class=\"token function\">dest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">gp_rename</span><span class=\"token punctuation\">(</span><span class=\"token string\">'composite-projections.min.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">gp_uglify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>gulp<span class=\"token punctuation\">.</span><span class=\"token function\">dest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\nThis is one of the most common tasks. It takes several source files, removes the comments, merges them and, finally, minifies the resulting file.</p>\n<ul>\n<li>gulp.src sets the source files. In our case, all the files under the <em>src</em> folder</li>\n<li>gulp<em>newer adds a condition: Only act if the source is newer than the _composite-projections.js</em> file</li>\n<li>gulp_strip removes the comments so the output file is smaller</li>\n<li>gulp<em>concat merges all the files in one, named _composite-projections.js</em>. This will be the main file in our project</li>\n<li>gulp.dest sets the output folder to this stream. Now, the file is saved, but the stream is still open to do the following steps</li>\n<li>gulp_rename changes the name of the output</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-uglify\">gulp_uglify</a> runs <a href=\"https://github.com/mishoo/UglifyJS\">UglifyJS</a>, which minifies the code, renaming all the variables, removing spaces and newlines, etc. so a compact and more efficient file is created</li>\n<li>gulp.dest will save this new minified file too</li>\n</ul>\n<p>To build again the file, just type <em>gulp build</em>. Of course, usually we want to run several tasks at once, and the tasks have their own dependencies too. Those dependencies are set this way:\n<pre><code>\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'build'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'build_separated'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'get_sample_data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> gulp<span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./test/test.js'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>read<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>gp<span class=\"token operator\">&lt;</span>em<span class=\"token operator\">></span><span class=\"token function\">mocha</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>reporter<span class=\"token operator\">:</span> <span class=\"token string\">'nyan'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\nThis task, that will test the files as we&#39;ll see later, requires the tasks <em>&#39;build&#39;, &#39;build</em>separated&#39;</em> and <em>&#39;get_sample_data&#39;</em> to be run before it starts. It&#39;s logical, since no test can be done if the final file isn&#39;t built and the needed data is available. I like this method, since you only take care of the dependencies for each task, and the system decides what to run depending on the calculated final dependencies, which can be complicated.</p>\n<p>Usually, the <em>default</em> task will have several dependencies, so they run all, and in parallel when possible. The default task itself can be void:\n<pre><code>\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'lint'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'build'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'build_separated'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'license_year'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></p>\n<p>There are several libraries similar to gulp, <a href=\"http://gruntjs.com/\">grunt</a> is the most popular. I chose gulp after looking some comparisons, and because it was the last hype. I&#39;m happy with it, but the others seem nice too.</p>\n<h2 id=\"linting-the-code\">Linting the code</h2>\n<p>Using a <a href=\"https://en.wikipedia.org/wiki/Lint_%28software%29\">lint program</a> helps to code better by maintaining a nice code, using a good number of methods in the classes, etc. <a href=\"http://jshint.com/\">JSHint</a> is a program that flags suspicious usage in programs written in JavaScript. It can be used with gulp, by installing the <em>gulp-jshint</em> plugin. The created task looks like this:\n<pre><code>\n<span class=\"token keyword\">return</span> gulp<span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./src/&lt;em>.js'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">gp_jshint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>gp_jshint<span class=\"token punctuation\">.</span><span class=\"token function\">reporter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\nWhich will run for all the files under the *src\\</em> folder (the original ones, with all the comments).\nLet&#39;s see an example, if I change\n<pre><code>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">>=</span><span class=\"token operator\">-</span><span class=\"token number\">0.10779</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>y<span class=\"token operator\">&lt;</span> <span class=\"token number\">0.067673</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> x <span class=\"token operator\">>=</span> <span class=\"token operator\">-</span><span class=\"token number\">0.1866</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.0255</span> <span class=\"token operator\">?</span> canaryIslands\n<span class=\"token operator\">:</span> iberianPeninsule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invert</span><span class=\"token punctuation\">(</span>coordinates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\nto\n<pre><code>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">>=</span><span class=\"token operator\">-</span><span class=\"token number\">.10779</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>y<span class=\"token operator\">&lt;</span> <span class=\"token number\">.067673</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> x <span class=\"token operator\">>=</span> <span class=\"token operator\">-</span><span class=\"token number\">0.1866</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">.0255</span> <span class=\"token operator\">?</span> canaryIslands\n<span class=\"token operator\">:</span> iberianPeninsule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invert</span><span class=\"token punctuation\">(</span>coordinates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\nI&#39;ll get messages like:\n<pre><code>\nsrc<span class=\"token operator\">/</span>conicConformalSpain<span class=\"token operator\">-</span>proj<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span> line <span class=\"token number\">54</span><span class=\"token punctuation\">,</span> col <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span> leading decimal point can be confused <span class=\"token keyword\">with</span> a dot<span class=\"token operator\">:</span> <span class=\"token string\">'.10779'</span><span class=\"token punctuation\">.</span>\n</code></pre>\nSometimes, there are errors that you can&#39;t (or dont want to) avoid. In my case, I got the message:</p>\n<p><code>Expected an assignment or function call and instead saw an expression</code></p>\n<p>I google it and found a <a href=\"https://jslinterrors.com/expected-an-assignment-or-function-call\">nice explanation and solution</a>, which is adding:\n<pre><code>\n<span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">_ jshint -W030 _</span><span class=\"token regex-delimiter\">/</span></span>\n</code></pre>\nin the function. I didn&#39;t change the code, since it was taken from the original Mike Bostock&#39;s one, and if he says it&#39;s better this way, I won&#39;t change it.</p>\n<h2 id=\"testing-with-mocha\">Testing with mocha</h2>\n<p>Wether you want to use the <a href=\"https://en.wikipedia.org/wiki/Test-driven_development\">test-driven developement</a> process or just test some results to your functions so the changes you make don&#39;t give wrong results, you need a test framework. <a href=\"https://mochajs.org/\">Mocha</a> is one of the available ones. It&#39;s got a gulp plugin too, so it can be integrated to the project without problems.</p>\n<p>First, I made a <em>test</em> directory to put all the test stuff. Then, installed mocha:\n<pre><code>\nnpm install <span class=\"token operator\">-</span>g mocha\nnpm install <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev gulp<span class=\"token operator\">-</span>mocha\n</code></pre>\nNow, you can run mocha from any project, or integrate it in your project. The tests are in the <em>./tests/test.js</em> file, which looks like:\n<pre><code>\n<span class=\"token keyword\">var</span> assert <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'assert'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Array'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#indexOf()'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should return -1 when the value is not present'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\nYou can create as many tests as you want under <em>describe</em> and sub-tests under <em>it</em>.</p>\n<p>In the case of d3-composite-projections, I found two things a bit more difficult to test. One is creating a sample <em>svg</em> file for each projection without using the browser. I explained how to do it in the post <a href=\"/d3/2015/05/29/d3-maps-nodejs.html\">Creating maps using D3js and nodejs</a>.</p>\n<p>The other is using the created javascript files without including the libraries in the code. Using d3js with node implies requiring it at the begining with <code>require(&#39;d3&#39;);</code>. But my generated file doesn&#39;t have that. <a href=\"http://stackoverflow.com/a/8808162/1086633\">I found my solution at Stackoverflow</a>. Basically, you load the modules at <em>test.js</em> and pass it to the file as the context. In my example:\n<pre><code>\n<span class=\"token keyword\">var</span> execfile <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./execfile.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d3 <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../node&lt;em>modules/d3/d3.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> composite_projection <span class=\"token operator\">=</span> <span class=\"token function\">execfile</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token operator\">+</span><span class=\"token string\">\"/../composite-projections.js\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>d3<span class=\"token operator\">:</span> d3<span class=\"token punctuation\">,</span> console<span class=\"token operator\">:</span> console<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\nThis will allow the functions in composite-projections.js to use _d3</em> ant the console if necessary.</p>\n<p>Mocha can do many other stuff, I have only used a very small part of it.</p>\n<h2 id=\"publishing-the-code-at-github\">Publishing the code at GitHub</h2>\n<p>The code must be published somewhere if you want to share it. The most popular place right now is GitHub, and the other tools will go there to get the code.</p>\n<p>You can either clone an existing repository before creating the code\n<pre><code>\ngit clone <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"https://github.com/user/repo.git\"</span><span class=\"token operator\">></span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>user<span class=\"token operator\">/</span>repo<span class=\"token punctuation\">.</span>git<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n</code></pre>\nor, if you already have the code, create a repository at GitHub and then:\n<pre><code>\ngit init\ngit add <span class=\"token punctuation\">.</span>\ngit commit <span class=\"token operator\">-</span>m <span class=\"token string\">\"First commit\"</span>\ngit remote add origin <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"https://github.com/user/repo.git\"</span><span class=\"token operator\">></span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>user<span class=\"token operator\">/</span>repo<span class=\"token punctuation\">.</span>git<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\ngit remote <span class=\"token operator\">-</span>v\n</code></pre>\nChanging the address to the created repository.</p>\n<p>You can now change the <em>package.json</em> file adding the new repository, so NPM can work. In the case of -d3-composite-projections, the lines are:</p>\n<p><pre><code>\n<span class=\"token string\">\"repository\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"token string\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"git\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;a href=\"</span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>rveciana<span class=\"token operator\">/</span>d3<span class=\"token operator\">-</span>composite<span class=\"token operator\">-</span>projections<span class=\"token punctuation\">.</span>git<span class=\"token string\">\"\"</span><span class=\"token operator\">></span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>rveciana<span class=\"token operator\">/</span>d3<span class=\"token operator\">-</span>composite<span class=\"token operator\">-</span>projections<span class=\"token punctuation\">.</span>git\"<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"bugs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"token string\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;a href=\"</span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>rveciana<span class=\"token operator\">/</span>d3<span class=\"token operator\">-</span>composite<span class=\"token operator\">-</span>projections<span class=\"token operator\">/</span>issues<span class=\"token string\">\"\"</span><span class=\"token operator\">></span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>rveciana<span class=\"token operator\">/</span>d3<span class=\"token operator\">-</span>composite<span class=\"token operator\">-</span>projections<span class=\"token operator\">/</span>issues\"<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\nNote that GitHub has a nice issues page for the projects, and that it can be linked here.</p>\n<p>I added many directories at the .gitignore files to avoid filling the repository with temporary files.</p>\n<h2 id=\"publishing-with-npm\">Publishing with NPM</h2>\n<p>Now that we have a good library, we can publish it to npm so other people can use it from nodejs. The first thing is to fill ahe empty fields you amy have at your <em>package.json</em> with the GitHub address, licence, etc. There are some <a href=\"https://docs.npmjs.com/getting-started/publishing-npm-packages\">tutorials about how to so it step by step</a>.\n<pre><code>\nnpm adduser <span class=\"token operator\">/</span> npm <span class=\"token function\">login</span> <span class=\"token punctuation\">(</span>use the second one <span class=\"token keyword\">if</span> you already have a user<span class=\"token punctuation\">)</span>\nnpm config ls\nnpm publish\nnpm version <span class=\"token operator\">&lt;</span>update_type<span class=\"token operator\">></span>\ngit push <span class=\"token operator\">--</span>follow<span class=\"token operator\">-</span>tags\nnpm publish\n</code></pre></p>\n<ol>\n<li>You have to either create a user or set your existing user to the project.</li>\n<li>config ls will test if the user is set properly</li>\n<li>publish will publish if everything is well configured</li>\n<li>If you want to publish a new version, you have first to create it using version. The <em>package.json</em> file will have a new version, and the git repo will be tagged with the new version too. The update types are:\n..1. patch: v0.0.1 will become v0.0.2\n..2. minor: v0.0.1 will become v0.1.0\n..3. major: v0.0.1 will become v1.0.0</li>\n<li>You have to push the new tag to GitHub</li>\n<li>Now you can publish the package again</li>\n</ol>\n<p>I made many errors doing all this (plus changing the Bower version), so I put it into a gulp task:\n<pre><code>\n<span class=\"token keyword\">function</span> <span class=\"token function\">inc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">importance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> gulp<span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'./package.json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'./bower.json'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">gp_bump</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> importance<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>gulp<span class=\"token punctuation\">.</span><span class=\"token function\">dest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>gp_git<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Creating new package version'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">gp_filter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'package.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">gp_tagversion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'patch'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">inc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'patch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'feature'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">inc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'minor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'release'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">inc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'major'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\ngulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'push'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\ngp_git<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'origin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'master'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>args<span class=\"token operator\">:</span> <span class=\"token string\">\" --follow-tags\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></p>\n<ol>\n<li>The <em>bump</em> plugin will increment all the <em>version</em> tags in the indicated files (bower.json and package.json) with the indicated type</li>\n<li>Then, the <a href=\"https://www.npmjs.com/package/gulp-git\">gulp-git</a> plugin will commit the changes</li>\n<li>gulp_tagversion sets a new git tag with the same value set in package.json</li>\n</ol>\n<h2 id=\"publishing-with-bower\">Publishing with Bower</h2>\n<p><a href=\"http://bower.io/\">Bower</a> is a tool to manage the dependencies at a web site. It keeps a track of the libraries and its versions your site depends on. Since d3-composite-projections is intended to be used in a web with d3, it&#39;s interesting to publish it at bower so people can use it in their projects. They have a <a href=\"http://bower.io/docs/creating-packages/\">nice tutorial on creating a package</a>. Basically, for this project:\n<pre><code>\nbower init\nbower install d3 <span class=\"token operator\">--</span>save\nbower register <span class=\"token operator\">&lt;</span>my<span class=\"token operator\">-</span><span class=\"token keyword\">package</span><span class=\"token operator\">-</span>name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>git<span class=\"token operator\">-</span>endpoint<span class=\"token operator\">></span>\n</code></pre></p>\n<ol>\n<li>init will prompt some questions and create the <em>bower.json</em> file, as npm init did</li>\n<li>The install system is identical to the npm one</li>\n<li>Register uploads the project to bower. This works slightly different from npm, since bower will look at GitHub directly for new versions, so there is no need to interact with it any more, just remember to change the tag in the <em>bower.json</em> file</li>\n</ol>\n<h2 id=\"continuous-integration-with-travis\">Continuous integration with Travis</h2>\n<p><a href=\"https://travis-ci.org/\">Travis CI</a> is a continuous integration tool that works very well with node.js and GitHub. It builds and tests all your files each time a commit is pushed to GitHub, and can even deploy the changes to NPM automatically only if everything goes well.</p>\n<p>The first thing to set up Travis is to create your account. You can do it directly from GitHub, who will ask you a permission. Then, you can take the three steps shown in this image:</p>\n<img src=\"/images/other/d3-library/travis.png\"/>\n\n<ul>\n<li>Select the project you want to link</li>\n<li>Create the .travis.yml file. In our case, use the <a href=\"https://docs.travis-ci.com/user/languages/javascript-with-nodejs\">Travis javascript tutorial</a>, and specifically the <a href=\"https://docs.travis-ci.com/user/languages/javascript-with-nodejs#Using-Gulp\">Travis gulp section</a></li>\n<li>Publishing any commit will run your project at travis</li>\n</ul>\n<p>Since I was using a nodejs version higher than 4, <a href=\"https://docs.travis-ci.com/user/languages/javascript-with-nodejs#Node.js-v4-%28or-io.js-v3%29-compiler-requirements\">this section</a> applies too. It may seem complicated, but the resulting file is quite simple:\n<pre><code>\nlanguage<span class=\"token operator\">:</span> node_js\nnode_js<span class=\"token operator\">:</span>\n<span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token number\">5.2</span><span class=\"token number\">.0</span>\nbefore_script<span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>npm install <span class=\"token operator\">-</span>g gulp\nscript<span class=\"token operator\">:</span> gulp\nenv<span class=\"token operator\">:</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token constant\">CXX</span><span class=\"token operator\">=</span>g<span class=\"token operator\">++</span><span class=\"token operator\">-</span><span class=\"token number\">4.8</span>\naddons<span class=\"token operator\">:</span>\napt<span class=\"token operator\">:</span>\nsources<span class=\"token operator\">:</span> <span class=\"token operator\">-</span> ubuntu<span class=\"token operator\">-</span>toolchain<span class=\"token operator\">-</span>r<span class=\"token operator\">-</span>test\npackages<span class=\"token operator\">:</span> <span class=\"token operator\">-</span> g<span class=\"token operator\">++</span><span class=\"token operator\">-</span><span class=\"token number\">4.8</span>\n</code></pre>\nTo automatize the NPM publication, you can use the travis command line. First, install it <a href=\"https://blog.travis-ci.com/2013-01-14-new-client/\">using this instructions</a>. Then, just type\n<pre><code>\ntravis encrypt <span class=\"token constant\">YOUR_API_KEY</span> <span class=\"token operator\">--</span>add deploy<span class=\"token punctuation\">.</span>api_key\ntravis setup npm\n</code></pre>\nThe API key can be found at <code>~/.npmrc</code> and must be encrypted with the first command. The second command will add the configuration at your .travis.yml file. You just have to answer the questions. You can find more information in <a href=\"https://docs.travis-ci.com/user/deployment/npm#stq=&amp;stp=0\">this tutorial</a>. My final deploy section looks like this:\n<pre><code>\ndeploy<span class=\"token operator\">:</span>\nprovider<span class=\"token operator\">:</span> npm\nemail<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"mailto:rveciana@gmail.com\"</span><span class=\"token operator\">></span>rveciana@gmail<span class=\"token punctuation\">.</span>com<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\napi_key<span class=\"token operator\">:</span>\nsecure<span class=\"token operator\">:</span> EncryptedAPIKey\non<span class=\"token operator\">:</span>\ntags<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\nrepo<span class=\"token operator\">:</span> rveciana<span class=\"token operator\">/</span>d3<span class=\"token operator\">-</span>composite<span class=\"token operator\">-</span>projections\n</code></pre>\nThe <code>tags: true</code> tag makes travis to deploy to NPM only if a tag has been changed, so other commits I may push will run the tests but won&#39;t change anything at the NPM repository.</li>\n</ul>\n<p>When you go to the <a href=\"https://travis-ci.org/rveciana/d3-composite-projections\">travis project page</a>, you will find a small image like this:</p>\n<p><a href=\"https://travis-ci.org/rveciana/d3-composite-projections\"><img src=\"https://travis-ci.org/rveciana/d3-composite-projections.svg?branch=master\" alt=\"travis image\"></a></p>\n<p>you can insert it into your README.md file or wherever you want so people can know if the last version is giving a good build result.</p>\n","tags":["npm","nodejs","bower","travis","mocha","tutorial","projections"],"date":"2015-12-22T00:00:00.000Z"}